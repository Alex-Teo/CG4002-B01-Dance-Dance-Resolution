[{"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\index.js":"1","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\App.js":"3","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\UserCard.js":"4","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Sidebar.js":"5","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\CoachCard.js":"6","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\ScreenHeader.js":"7","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Analytics.js":"8","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Stream.js":"9","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Line.js":"10","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\HistoryScreen.js":"11","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\DashboardScreen.js":"12","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\WelcomeScreen.js":"13","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\HistoryTable.js":"14","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\context\\socket.js":"15","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\context\\inititaldata.js":"16","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\LoginScreen.js":"17","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\SignIn.js":"18","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Register.js":"19"},{"size":519,"mtime":1632880674571,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1629614679416,"results":"22","hashOfConfig":"21"},{"size":1055,"mtime":1635589371951,"results":"23","hashOfConfig":"21"},{"size":1208,"mtime":1635526037414,"results":"24","hashOfConfig":"21"},{"size":1713,"mtime":1634616329477,"results":"25","hashOfConfig":"21"},{"size":4036,"mtime":1635265960108,"results":"26","hashOfConfig":"21"},{"size":1062,"mtime":1634564100355,"results":"27","hashOfConfig":"21"},{"size":1880,"mtime":1634564100351,"results":"28","hashOfConfig":"21"},{"size":1975,"mtime":1634564100356,"results":"29","hashOfConfig":"21"},{"size":1917,"mtime":1634564100353,"results":"30","hashOfConfig":"21"},{"size":438,"mtime":1635566199383,"results":"31","hashOfConfig":"21"},{"size":8634,"mtime":1635566207759,"results":"32","hashOfConfig":"21"},{"size":522,"mtime":1634620121220,"results":"33","hashOfConfig":"21"},{"size":5628,"mtime":1635601053528,"results":"34","hashOfConfig":"21"},{"size":193,"mtime":1635526869870,"results":"35","hashOfConfig":"21"},{"size":3070,"mtime":1635536443086,"results":"36","hashOfConfig":"21"},{"size":899,"mtime":1635584269130,"results":"37","hashOfConfig":"21"},{"size":1048,"mtime":1635584108934,"results":"38","hashOfConfig":"21"},{"size":1067,"mtime":1635584185015,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1rbgyic",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\index.js",[],["86","87"],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\App.js",["88"],"import \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { SocketContext, socket } from \"./context/socket\";\r\n\r\n// Screens\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport DashboardScreen from \"./screens/DashboardScreen\";\r\nimport HistoryScreen from \"./screens/HistoryScreen\";\r\nimport WelcomeScreen from \"./screens/WelcomeScreen\";\r\nimport LoginScreen from \"./screens/LoginScreen\";\r\n\r\nfunction App() {\r\n  return (\r\n    <SocketContext.Provider value={socket}>\r\n      <div>\r\n        <Router>\r\n          {/* <Route exact path=\"/login\" component={LoginScreen} /> */}\r\n          <Sidebar />\r\n          <div className=\"pageContainer\">\r\n            <Switch>\r\n              <Route exact path=\"/\" component={WelcomeScreen} />\r\n              <Route exact path=\"/dashboard\" component={DashboardScreen} />\r\n              <Route exact path=\"/history\" component={HistoryScreen} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    </SocketContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\UserCard.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Sidebar.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\CoachCard.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\ScreenHeader.js",["89"],"import \"./ScreenHeader.css\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction ScreenHeader({ screenTitle, screenDesc }) {\r\n  const [currentDateTime, setDateTime] = useState(new Date());\r\n  const [currentDay, setDay] = useState(\"\");\r\n  const [currentDate, setDate] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    function refreshClock() {\r\n      setDateTime(new Date());\r\n      var dateArray = String(currentDateTime).split(\" \");\r\n      setDay(dateArray[0]);\r\n      setDate(dateArray[2] + \" \" + dateArray[1] + \" \" + dateArray[3]);\r\n    }\r\n    const timerId = setInterval(refreshClock, 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerId);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"dashboardDesc\">\r\n        <h1>{screenTitle}</h1>\r\n        <h2>{screenDesc}</h2>\r\n      </div>\r\n      <div className=\"timestamp\">\r\n        <h1>{currentDateTime.toLocaleTimeString()}</h1>\r\n        <h2>{currentDate}</h2>\r\n        <h2>{currentDay}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScreenHeader;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Analytics.js",["90","91"],"import DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport \"./Analytics.css\";\r\nimport Stream from \"./Stream\";\r\nimport Line from \"./Line\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction Analytics({\r\n  d1HandAcc,\r\n  d2HandAcc,\r\n  d3HandAcc,\r\n  d1HandGyro,\r\n  d2HandGyro,\r\n  d3HandGyro,\r\n  emgArray,\r\n}) {\r\n  const dropdownItems = [\r\n    \"EMG\",\r\n\r\n    \"Dancer 1 Accelerometer\",\r\n    \"Dancer 1 Gyroscope\",\r\n\r\n    \"Dancer 2 Accelerometer\",\r\n    \"Dancer 2 Gyroscope\",\r\n\r\n    \"Dancer 3 Accelerometer\",\r\n    \"Dancer 3 Gyroscope\",\r\n  ];\r\n\r\n  const [title, setTitle] = useState(\"EMG\");\r\n\r\n  const handleChange = (item) => {\r\n    setTitle(item);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTitle(title);\r\n  });\r\n\r\n  const renderGraph = (choice) => {\r\n    switch (choice) {\r\n      case \"EMG\":\r\n        return <Stream data={emgArray} />;\r\n      case \"Dancer 1 Accelerometer\":\r\n        return <Line data={d1HandAcc} axis={\"Accelerometer\"} />;\r\n      case \"Dancer 1 Gyroscope\":\r\n        return <Line data={d1HandGyro} axis={\"Gyroscope\"} />;\r\n      case \"Dancer 2 Accelerometer\":\r\n        return <Line data={d2HandAcc} axis={\"Accelerometer\"} />;\r\n      case \"Dancer 2 Gyroscope\":\r\n        return <Line data={d2HandGyro} axis={\"Gyroscope\"} />;\r\n      case \"Dancer 3 Accelerometer\":\r\n        return <Line data={d3HandAcc} axis={\"Accelerometer\"} />;\r\n      case \"Dancer 3 Gyroscope\":\r\n        return <Line data={d3HandGyro} axis={\"Gyroscope\"} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"analyticsWrapper\">\r\n      <DropdownButton id=\"dropdown\" title={title}>\r\n        {dropdownItems.map((item) => (\r\n          <Dropdown.Item onClick={() => handleChange(item)}>\r\n            {item}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </DropdownButton>\r\n      {renderGraph(title)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Analytics;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Stream.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Line.js",[],["92","93"],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\HistoryScreen.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\DashboardScreen.js",["94"],"import \"./DashboardScreen.css\";\r\n\r\nimport UserCard from \"../components/UserCard\";\r\nimport CoachCard from \"../components/CoachCard\";\r\nimport Analytics from \"../components/Analytics\";\r\nimport ScreenHeader from \"../components/ScreenHeader\";\r\n\r\nimport { SocketContext } from \"../context/socket\";\r\nimport {\r\n  initalCoachData,\r\n  initialEmgArray,\r\n  initialProcessedData,\r\n  initialPredictedPos,\r\n  initialD1HandAcc,\r\n  initialD2HandAcc,\r\n  initialD3HandAcc,\r\n  initialD1HandGyro,\r\n  initialD2HandGyro,\r\n  initialD3HandGyro,\r\n} from \"../context/inititaldata\";\r\n\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst DashboardScreen = () => {\r\n  // ---------------- Socket ---------------- //\r\n  const socket = useContext(SocketContext);\r\n  socket.on(\"connect\", () => {\r\n    console.log(`Client connected with socket.io ID: ${socket.id}`);\r\n  });\r\n\r\n  // ---------------- onClick ---------------- //\r\n  const toggleDisplayLogout = () => {\r\n    setDisplayLogout(!displayLogout);\r\n  };\r\n\r\n  const manualLogout = () => {\r\n    toggleDisplayLogout();\r\n    console.log(\"Manual logout clicked!\");\r\n    socket.emit(\"CLIENT_LOGOUT\");\r\n  };\r\n\r\n  // ---------------- useState ---------------- //\r\n  const [displayLogout, setDisplayLogout] = useState(false);\r\n  const [coachData, setCoachData] = useState(initalCoachData);\r\n  const [emgArray, setEmgArray] = useState(initialEmgArray);\r\n  const [processedData, setProcessedData] = useState(initialProcessedData);\r\n  const [predictedPos, setPredictedPos] = useState(initialPredictedPos);\r\n  const [d1HandAcc, setD1HandAcc] = useState(initialD1HandAcc);\r\n  const [d2HandAcc, setD2HandAcc] = useState(initialD2HandAcc);\r\n  const [d3HandAcc, setD3HandAcc] = useState(initialD3HandAcc);\r\n  const [d1HandGyro, setD1HandGyro] = useState(initialD1HandGyro);\r\n  const [d2HandGyro, setD2HandGyro] = useState(initialD2HandGyro);\r\n  const [d3HandGyro, setD3HandGyro] = useState(initialD3HandGyro);\r\n\r\n  // ---------------- Sockets ---------------- //\r\n  useEffect(() => {\r\n    var d1Time = 1;\r\n    var d2Time = 1;\r\n    var d3Time = 1;\r\n\r\n    socket.on(\"SERVER_D1_DATA\", (FinalData) => {\r\n      let tempD1HandAcc = d1HandAcc;\r\n      let tempD1HandGyro = d1HandGyro;\r\n\r\n      if (tempD1HandAcc[0].data.length > 10) {\r\n        tempD1HandAcc[0].data.shift();\r\n        tempD1HandAcc[1].data.shift();\r\n        tempD1HandAcc[2].data.shift();\r\n      }\r\n      if (tempD1HandGyro[0].data.length > 10) {\r\n        tempD1HandGyro[0].data.shift();\r\n        tempD1HandGyro[1].data.shift();\r\n        tempD1HandGyro[2].data.shift();\r\n      }\r\n      tempD1HandAcc[0].data.push({ x: d1Time, y: FinalData.aX });\r\n      tempD1HandAcc[1].data.push({ x: d1Time, y: FinalData.aY });\r\n      tempD1HandAcc[2].data.push({ x: d1Time, y: FinalData.aZ });\r\n\r\n      tempD1HandGyro[0].data.push({ x: d1Time, y: FinalData.gX });\r\n      tempD1HandGyro[1].data.push({ x: d1Time, y: FinalData.gY });\r\n      tempD1HandGyro[2].data.push({ x: d1Time, y: FinalData.gZ });\r\n\r\n      d1Time += 1;\r\n      setD1HandAcc(tempD1HandAcc);\r\n      setD1HandGyro(tempD1HandGyro);\r\n    });\r\n\r\n    socket.on(\"SERVER_D2_DATA\", (FinalData) => {\r\n      let tempD2HandAcc = d2HandAcc;\r\n      let tempD2HandGyro = d2HandGyro;\r\n\r\n      if (tempD2HandAcc[0].data.length > 10) {\r\n        tempD2HandAcc[0].data.shift();\r\n        tempD2HandAcc[1].data.shift();\r\n        tempD2HandAcc[2].data.shift();\r\n      }\r\n      if (tempD2HandGyro[0].data.length > 10) {\r\n        tempD2HandGyro[0].data.shift();\r\n        tempD2HandGyro[1].data.shift();\r\n        tempD2HandGyro[2].data.shift();\r\n      }\r\n      tempD2HandAcc[0].data.push({ x: d2Time, y: FinalData.aX });\r\n      tempD2HandAcc[1].data.push({ x: d2Time, y: FinalData.aY });\r\n      tempD2HandAcc[2].data.push({ x: d2Time, y: FinalData.aZ });\r\n\r\n      tempD2HandGyro[0].data.push({ x: d2Time, y: FinalData.gX });\r\n      tempD2HandGyro[1].data.push({ x: d2Time, y: FinalData.gY });\r\n      tempD2HandGyro[2].data.push({ x: d2Time, y: FinalData.gZ });\r\n\r\n      d2Time += 1;\r\n      setD2HandAcc(tempD2HandAcc);\r\n      setD2HandGyro(tempD2HandGyro);\r\n    });\r\n\r\n    socket.on(\"SERVER_D3_DATA\", (FinalData) => {\r\n      let tempD3HandAcc = d3HandAcc;\r\n      let tempD3HandGyro = d3HandGyro;\r\n\r\n      if (tempD3HandAcc[0].data.length > 10) {\r\n        tempD3HandAcc[0].data.shift();\r\n        tempD3HandAcc[1].data.shift();\r\n        tempD3HandAcc[2].data.shift();\r\n      }\r\n      if (tempD3HandGyro[0].data.length > 10) {\r\n        tempD3HandGyro[0].data.shift();\r\n        tempD3HandGyro[1].data.shift();\r\n        tempD3HandGyro[2].data.shift();\r\n      }\r\n      tempD3HandAcc[0].data.push({ x: d3Time, y: FinalData.aX });\r\n      tempD3HandAcc[1].data.push({ x: d3Time, y: FinalData.aY });\r\n      tempD3HandAcc[2].data.push({ x: d3Time, y: FinalData.aZ });\r\n\r\n      tempD3HandGyro[0].data.push({ x: d3Time, y: FinalData.gX });\r\n      tempD3HandGyro[1].data.push({ x: d3Time, y: FinalData.gY });\r\n      tempD3HandGyro[2].data.push({ x: d3Time, y: FinalData.gZ });\r\n\r\n      d3Time += 1;\r\n      setD3HandAcc(tempD3HandAcc);\r\n      setD3HandGyro(tempD3HandGyro);\r\n    });\r\n\r\n    socket.on(\"SERVER_EMG_DATA\", (FinalData) => {\r\n      let newArray = emgArray;\r\n      newArray.push(FinalData);\r\n      setEmgArray(newArray);\r\n    });\r\n\r\n    socket.on(\"SERVER_PROCESSED_DATA\", (ProcessedData) => {\r\n      setProcessedData(ProcessedData);\r\n      setPredictedPos(ProcessedData.predictedPos);\r\n    });\r\n\r\n    socket.on(\"SERVER_COACH_DATA\", (coachData) => {\r\n      setCoachData(coachData);\r\n    });\r\n\r\n    socket.on(\"SERVER_LOGOUT\", () => {\r\n      toggleDisplayLogout();\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"dashboard_wrapper\">\r\n      <ScreenHeader\r\n        screenTitle=\"Dashboard\"\r\n        screenDesc=\"A closer look at your performance\"\r\n      />\r\n      <div className={displayLogout ? \"logout_bg\" : \"logout_bg_hidden\"}></div>\r\n      <div className={displayLogout ? \"logout_prompt\" : \"logout_prompt_hidden\"}>\r\n        <div className=\"logout_msg\">\r\n          We have detected a logout dance move!\r\n          <div className=\"sub_msg\">Would you like to end the session?</div>\r\n        </div>\r\n        <div className=\"logout_options\">\r\n          <Button\r\n            className=\"option_btn\"\r\n            variant=\"outline-secondary\"\r\n            onClick={() => toggleDisplayLogout()}\r\n          >\r\n            Continue Dancing\r\n          </Button>{\" \"}\r\n          <Link to=\"/history\">\r\n            <Button className=\"option_btn\" variant=\"danger\">\r\n              End Session\r\n            </Button>{\" \"}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sub_dashboard_wrapper\">\r\n        <div className=\"info_wrapper\">\r\n          <div className=\"users_wrapper\">\r\n            <UserCard\r\n              dancerId=\"Jess\"\r\n              syncDelay={processedData.syncDelay}\r\n              currentDance={processedData.predictedDance1}\r\n              currentPos={predictedPos.indexOf(1)}\r\n              coachDance={coachData.actualDance}\r\n              coachPos={coachData.actualPositions}\r\n            />\r\n            <UserCard\r\n              dancerId=\"Amir\"\r\n              syncDelay={processedData.syncDelay}\r\n              currentDance={processedData.predictedDance2}\r\n              currentPos={predictedPos.indexOf(2)}\r\n              coachDance={coachData.actualDance}\r\n              coachPos={coachData.actualPositions}\r\n            />\r\n            <UserCard\r\n              dancerId=\"Billy\"\r\n              syncDelay={processedData.syncDelay}\r\n              currentDance={processedData.predictedDance3}\r\n              currentPos={predictedPos.indexOf(3)}\r\n              coachDance={coachData.actualDance}\r\n              coachPos={coachData.actualPositions}\r\n            />\r\n          </div>\r\n          <div className=\"graph_wrapper\">\r\n            <Analytics\r\n              d1HandAcc={d1HandAcc}\r\n              d2HandAcc={d2HandAcc}\r\n              d3HandAcc={d3HandAcc}\r\n              d1HandGyro={d1HandGyro}\r\n              d2HandGyro={d2HandGyro}\r\n              d3HandGyro={d3HandGyro}\r\n              emgArray={emgArray.slice(-20)}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"coach_wrapper\">\r\n          <CoachCard\r\n            currentDance={coachData.actualDance}\r\n            actualPositions={coachData.actualPositions}\r\n            dancerDance={processedData.predictedDance}\r\n            dancerPos={processedData.predictedPos}\r\n          />\r\n          <Button onClick={() => manualLogout()}>TEST</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardScreen;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\WelcomeScreen.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\HistoryTable.js",["95"],"import axios from \"axios\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport \"./HistoryTable.css\";\r\n\r\nfunction HistoryTable() {\r\n  const [historyData, setHistoryData] = useState([]);\r\n  const [modal, setModal] = useState(false);\r\n  const [modalRes, setModalRes] = useState([]);\r\n  const [dances, setDances] = useState([]);\r\n  const [uniqueDances, setUniqueDances] = useState([]);\r\n  const [aveSyncDelay, setAveSyncDelay] = useState([]);\r\n  const [accList, setAccList] = useState([]);\r\n\r\n  function getMode(array) {\r\n    if (array.length == 0) return null;\r\n    var modeMap = {};\r\n    var maxEl = array[0],\r\n      maxCount = 1;\r\n    for (var i = 0; i < array.length; i++) {\r\n      var el = array[i];\r\n      if (modeMap[el] == null) modeMap[el] = 1;\r\n      else modeMap[el]++;\r\n      if (modeMap[el] > maxCount) {\r\n        maxEl = el;\r\n        maxCount = modeMap[el];\r\n      }\r\n    }\r\n    return maxEl;\r\n  }\r\n\r\n  function getAveSync(array) {\r\n    var sum = 0;\r\n    array.forEach(function (item) {\r\n      sum += Number(item.syncDelay);\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  function getAccuracy(array) {\r\n    var mode = \"\";\r\n    var accuracy = [0, 0, 0];\r\n    array.forEach(function (item) {\r\n      mode = getMode([\r\n        array.predictedDance1,\r\n        array.predictedDance2,\r\n        array.predictedDance3,\r\n      ]);\r\n      if (array.predictedDance1 === mode) accuracy[0] += 1;\r\n      if (array.predictedDance2 === mode) accuracy[1] += 1;\r\n      if (array.predictedDance3 === mode) accuracy[2] += 1;\r\n    });\r\n    return accuracy;\r\n  }\r\n\r\n  const handleRowClick = (rowData, rowMeta) => {\r\n    var id = rowData[0];\r\n    axios.get(`http://localhost:5000/api/history/${id}`).then((res) => {\r\n      toggleModal();\r\n      console.log(res.data[0]);\r\n      setModalRes(res.data[0]);\r\n      var dancesList = res.data[0].overallProcessedData.map(\r\n        (item) => item.predictedDance1\r\n      );\r\n      var uniqueDancesSet = new Set(dancesList);\r\n      setDances(dancesList);\r\n      setUniqueDances(uniqueDancesSet);\r\n      setAveSyncDelay(getAveSync(res.data[0].overallProcessedData));\r\n      setAccList(getAccuracy(res.data[0].overallProcessedData));\r\n    });\r\n  };\r\n\r\n  const toggleModal = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  const tableColumns = [\r\n    {\r\n      name: \"_id\",\r\n      label: \"ID\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n        display: false,\r\n      },\r\n    },\r\n    {\r\n      name: \"date\",\r\n      label: \"Date\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      },\r\n    },\r\n    {\r\n      name: \"time\",\r\n      label: \"Time\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      },\r\n    },\r\n    {\r\n      name: \"duration\",\r\n      label: \"Duration (sec)\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      },\r\n    },\r\n    {\r\n      name: \"\",\r\n      options: {\r\n        customBodyRender: (value, tableMeta, updateValue) => {\r\n          return (\r\n            <Button className=\"option_btn\" variant=\"outline-success\">\r\n              View\r\n            </Button>\r\n          );\r\n        },\r\n        sort: false,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const tableOptions = {\r\n    filterType: \"checkbox\",\r\n    tableBodyHeight: \"500px\",\r\n    tableBodyMaxHeight: \"500px\",\r\n    selectableRows: \"none\",\r\n    expandableRowsOnClick: true,\r\n    onRowClick: handleRowClick,\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:5000/api/history\").then((res) => {\r\n      var result = res.data;\r\n      setHistoryData(result);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div\r\n        className={modal ? \"history_bg\" : \"history_bg_hidden\"}\r\n        onClick={() => toggleModal()}\r\n      ></div>\r\n      <div className={modal ? \"history_modal\" : \"history_modal_hidden\"}>\r\n        <div className=\"modal_header\">\r\n          <div className=\"modal_header_component\">\r\n            <div className=\"sub_header\">Date</div> <br />\r\n            {modalRes.date}\r\n          </div>\r\n          <div className=\"modal_header_component\">\r\n            <div className=\"sub_header\">Time</div>\r\n            <br />\r\n            {modalRes.time}\r\n          </div>\r\n          <div className=\"modal_header_component\">\r\n            <div className=\"sub_header\">Session Duration</div>\r\n            <br />\r\n            {modalRes.duration}s\r\n          </div>\r\n        </div>\r\n        <div className=\"modal_content\">\r\n          <div className=\"modal_content_1\">\r\n            <div className=\"sub2_header\">Most Frequent Dance</div>\r\n            <br />\r\n            {getMode(dances)}\r\n            <div className=\"sub2_header\">\r\n              Unique Dances ({uniqueDances.size})\r\n            </div>\r\n            <br />\r\n            {Array.from(uniqueDances).map((uD) => {\r\n              return <div>{uD}</div>;\r\n            })}\r\n          </div>\r\n          <div className=\"modal_content_1\">\r\n            <div className=\"sub2_header\">Average Sync Delay</div>\r\n            <br />\r\n            {aveSyncDelay}s<div className=\"sub2_header\">Dancer Accuracy</div>\r\n            <br />\r\n            Dancer 1 - {(accList[0] / dances.length) * 100}%\r\n            <br />\r\n            Dancer 2 - {(accList[1] / dances.length) * 100}%\r\n            <br /> Dancer 3 - {(accList[2] / dances.length) * 100}%\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <MUIDataTable\r\n        className=\"history_table\"\r\n        // title={\"History\"}\r\n        data={historyData}\r\n        columns={tableColumns}\r\n        options={tableOptions}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HistoryTable;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\context\\socket.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\context\\inititaldata.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\LoginScreen.js",["96","97"],"import \"./LoginScreen.css\";\r\nimport loginPhoto from \"../images/loginPhoto.jpg\";\r\nimport blob1 from \"../images/blob1.svg\";\r\nimport blob2 from \"../images/blob2.svg\";\r\n\r\nimport Register from \"../components/Register\";\r\nimport SignIn from \"../components/SignIn\";\r\nimport { useState } from \"react\";\r\n\r\nfunction LoginScreen() {\r\n  const [signIn, setSignIn] = useState(false);\r\n\r\n  const toggleForm = () => {\r\n    setSignIn(!signIn);\r\n  };\r\n\r\n  return (\r\n    <div className=\"login_wrapper\">\r\n      <div className=\"login_photo\">\r\n        <img src={loginPhoto} alt=\"LoginPhoto\" />\r\n      </div>\r\n      <div className=\"login_form_wrapper\">\r\n        <img className=\"blob1\" src={blob1} />\r\n        <img className=\"blob2\" src={blob2} onClick={() => toggleForm()} />\r\n        <div className=\"login_form\">{signIn ? <SignIn /> : <Register />}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\SignIn.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Register.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":11,"column":8,"nodeType":"104","messageId":"105","endLine":11,"endColumn":19},{"ruleId":"106","severity":1,"message":"107","line":20,"column":6,"nodeType":"108","endLine":20,"endColumn":8,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":37,"column":3,"nodeType":"104","endLine":37,"endColumn":12,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":42,"column":5,"nodeType":"114","messageId":"115","endLine":57,"endColumn":6},{"ruleId":"98","replacedBy":"116"},{"ruleId":"100","replacedBy":"117"},{"ruleId":"106","severity":1,"message":"118","line":162,"column":6,"nodeType":"108","endLine":162,"endColumn":8,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":19,"column":22,"nodeType":"122","messageId":"123","endLine":19,"endColumn":24},{"ruleId":"124","severity":1,"message":"125","line":23,"column":9,"nodeType":"126","endLine":23,"endColumn":46},{"ruleId":"124","severity":1,"message":"125","line":24,"column":9,"nodeType":"126","endLine":24,"endColumn":75},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'LoginScreen' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentDateTime'. Either include it or remove the dependency array.","ArrayExpression",["129"],"React Hook useEffect contains a call to 'setTitle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [title] as a second argument to the useEffect Hook.",["130"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["127"],["128"],"React Hook useEffect has missing dependencies: 'd1HandAcc', 'd1HandGyro', 'd2HandAcc', 'd2HandGyro', 'd3HandAcc', 'd3HandGyro', 'emgArray', 'socket', and 'toggleDisplayLogout'. Either include them or remove the dependency array.",["131"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [currentDateTime]",{"range":"138","text":"139"},"Add dependencies array: [title]",{"range":"140","text":"141"},"Update the dependencies array to be: [d1HandAcc, d1HandGyro, d2HandAcc, d2HandGyro, d3HandAcc, d3HandGyro, emgArray, socket, toggleDisplayLogout]",{"range":"142","text":"143"},[674,676],"[currentDateTime]",[763,763],", [title]",[5665,5667],"[d1HandAcc, d1HandGyro, d2HandAcc, d2HandGyro, d3HandAcc, d3HandGyro, emgArray, socket, toggleDisplayLogout]"]