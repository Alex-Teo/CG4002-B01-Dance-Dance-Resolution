[{"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\index.js":"1","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\App.js":"3","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\UserCard.js":"4","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\History.js":"5","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Sidebar.js":"6","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\CoachCard.js":"7","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Stream.js":"8","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\Dashboard.js":"9","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\ScreenHeader.js":"10"},{"size":519,"mtime":1632880674571,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1629614679416,"results":"13","hashOfConfig":"12"},{"size":622,"mtime":1632886941555,"results":"14","hashOfConfig":"12"},{"size":1183,"mtime":1632925445703,"results":"15","hashOfConfig":"12"},{"size":286,"mtime":1631838605892,"results":"16","hashOfConfig":"12"},{"size":1713,"mtime":1632886679659,"results":"17","hashOfConfig":"12"},{"size":3876,"mtime":1632923098346,"results":"18","hashOfConfig":"12"},{"size":2171,"mtime":1632913967545,"results":"19","hashOfConfig":"12"},{"size":7171,"mtime":1632925307836,"results":"20","hashOfConfig":"12"},{"size":1062,"mtime":1632886928137,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1rbgyic",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\index.js",[],["45","46"],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\App.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\UserCard.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\History.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Sidebar.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\CoachCard.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Stream.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\Dashboard.js",["47","48"],"import \"./Dashboard.css\";\r\nimport UserCard from \"../components/UserCard\";\r\nimport CoachCard from \"../components/CoachCard\";\r\nimport Stream from \"../components/Stream\";\r\nimport ScreenHeader from \"../components/ScreenHeader\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst Dashboard = () => {\r\n  // ---------------- useState ---------------- //\r\n  // useState for coach data\r\n  const [currentCoachData, setCurrentCoachData] = useState({\r\n    timestamp: Date.now(),\r\n    actualDance: \" \",\r\n    actualPositions: \" \",\r\n    dancer1Feedback: \" \",\r\n    dancer2Feedback: \" \",\r\n    dancer3Feedback: \" \",\r\n  });\r\n\r\n  // useState for raw data\r\n  const [currentDancer1RawData, setCurrentDancer1RawData] = useState({\r\n    userID: \" \",\r\n    timestamp: Date.now(),\r\n    aX: \" \",\r\n    aY: \" \",\r\n    aZ: \" \",\r\n    gX: \" \",\r\n    gY: \" \",\r\n    gZ: \" \",\r\n    emg: \" \",\r\n  });\r\n  const [currentDancer2RawData, setCurrentDancer2RawData] = useState({\r\n    userID: \" \",\r\n    timestamp: Date.now(),\r\n    aX: \" \",\r\n    aY: \" \",\r\n    aZ: \" \",\r\n    gX: \" \",\r\n    gY: \" \",\r\n    gZ: \" \",\r\n    emg: \" \",\r\n  });\r\n  const [currentDancer3RawData, setCurrentDancer3RawData] = useState({\r\n    userID: \" \",\r\n    timestamp: Date.now(),\r\n    aX: \" \",\r\n    aY: \" \",\r\n    aZ: \" \",\r\n    gX: \" \",\r\n    gY: \" \",\r\n    gZ: \" \",\r\n    emg: \" \",\r\n  });\r\n\r\n  const [currentEmgData, setCurrentEmgData] = useState([\r\n    {\r\n      Dancer1: 0,\r\n      Dancer2: 0,\r\n      Dancer3: 0,\r\n    },\r\n  ]);\r\n\r\n  // useState for processed data\r\n  const [dancer1ProcessedData, setCurrentDancer1ProcessedData] = useState({\r\n    userID: \" \",\r\n    timestamp: Date.now(),\r\n    predictedDance: \" \",\r\n    predictedPos: \" \",\r\n    syncDelay: \" \",\r\n  });\r\n  const [dancer2ProcessedData, setCurrentDancer2ProcessedData] = useState({\r\n    userID: \" \",\r\n    timestamp: Date.now(),\r\n    predictedDance: \" \",\r\n    predictedPos: \" \",\r\n    syncDelay: \" \",\r\n  });\r\n  const [dancer3ProcessedData, setCurrentDancer3ProcessedData] = useState({\r\n    userID: \" \",\r\n    timestamp: Date.now(),\r\n    predictedDance: \" \",\r\n    predictedPos: \" \",\r\n    syncDelay: \" \",\r\n  });\r\n\r\n  // ---------------- Sockets ---------------- //\r\n  useEffect(() => {\r\n    const socket = io.connect(\"http://localhost:5000\");\r\n\r\n    // Client-server socket initialized\r\n    socket.on(\"connect\", () => {\r\n      console.log(`Client connected with socket.io ID: ${socket.id}`);\r\n    });\r\n\r\n    // Sockets for coach data\r\n    socket.on(\"newCoachData\", (coachData) => {\r\n      setCurrentCoachData(coachData);\r\n    });\r\n\r\n    // Sockets for raw data\r\n    socket.on(\"newDancer1RawData\", (dancer1RawData) => {\r\n      setCurrentDancer1RawData(dancer1RawData);\r\n\r\n      if (currentEmgData.length > 20) {\r\n        currentEmgData.shift();\r\n      }\r\n      currentEmgData.push({\r\n        Dancer1: Number(currentDancer1RawData[\"emg\"]),\r\n        Dancer2: currentEmgData[currentEmgData.length - 1][\"Dancer2\"],\r\n        Dancer3: currentEmgData[currentEmgData.length - 1][\"Dancer3\"],\r\n      });\r\n    });\r\n    socket.on(\"newDancer2RawData\", (dancer2RawData) => {\r\n      setCurrentDancer2RawData(dancer2RawData);\r\n      if (currentEmgData.length > 20) {\r\n        currentEmgData.shift();\r\n      }\r\n      currentEmgData.push({\r\n        Dancer1: currentEmgData[currentEmgData.length - 1][\"Dancer1\"],\r\n        Dancer2: Number(currentDancer2RawData[\"emg\"]),\r\n        Dancer3: currentEmgData[currentEmgData.length - 1][\"Dancer3\"],\r\n      });\r\n    });\r\n    socket.on(\"newDancer3RawData\", (dancer3RawData) => {\r\n      setCurrentDancer3RawData(dancer3RawData);\r\n      if (currentEmgData.length > 20) {\r\n        currentEmgData.shift();\r\n      }\r\n      currentEmgData.push({\r\n        Dancer1: currentEmgData[currentEmgData.length - 1][\"Dancer1\"],\r\n        Dancer2: currentEmgData[currentEmgData.length - 1][\"Dancer2\"],\r\n        Dancer3: Number(currentDancer3RawData[\"emg\"]),\r\n      });\r\n\r\n      console.log(currentEmgData);\r\n    });\r\n\r\n    // Sockets for processed data\r\n    socket.on(\"newDancer1ProcessedData\", (dancer1ProcessedData) => {\r\n      setCurrentDancer1ProcessedData(dancer1ProcessedData);\r\n    });\r\n\r\n    socket.on(\"newDancer2ProcessedData\", (dancer2ProcessedData) => {\r\n      setCurrentDancer2ProcessedData(dancer2ProcessedData);\r\n    });\r\n\r\n    socket.on(\"newDancer3ProcessedData\", (dancer3ProcessedData) => {\r\n      setCurrentDancer3ProcessedData(dancer3ProcessedData);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"dashboardWrapper\">\r\n      <ScreenHeader\r\n        screenTitle=\"Dashboard\"\r\n        screenDesc=\"A closer look at your performance\"\r\n      />\r\n\r\n      <div className=\"analytics\">\r\n        <div className=\"users\">\r\n          <UserCard\r\n            dancerId=\"Dancer 1\"\r\n            delay={dancer1ProcessedData.syncDelay}\r\n            currentDance={dancer1ProcessedData.predictedDance}\r\n            currentPos={dancer1ProcessedData.predictedPos}\r\n            danceFlag={\r\n              dancer1ProcessedData.predictedDance ===\r\n              currentCoachData.actualDance\r\n                ? 1\r\n                : 0\r\n            }\r\n            posFlag={\r\n              currentCoachData.actualPositions.split(\" \")[0] ===\r\n              dancer1ProcessedData.predictedPos\r\n                ? 1\r\n                : 0\r\n            }\r\n          />\r\n          <UserCard\r\n            dancerId=\"Dancer 2\"\r\n            delay={dancer2ProcessedData.syncDelay}\r\n            currentDance={dancer2ProcessedData.predictedDance}\r\n            currentPos={dancer2ProcessedData.predictedPos}\r\n            danceFlag={\r\n              dancer2ProcessedData.predictedDance ===\r\n              currentCoachData.actualDance\r\n                ? 1\r\n                : 0\r\n            }\r\n            posFlag={\r\n              currentCoachData.actualPositions.split(\" \")[1] ===\r\n              dancer1ProcessedData.predictedPos\r\n                ? 1\r\n                : 0\r\n            }\r\n          />\r\n          <UserCard\r\n            dancerId=\"Dancer 3\"\r\n            delay={dancer3ProcessedData.syncDelay}\r\n            currentDance={dancer3ProcessedData.predictedDance}\r\n            currentPos={dancer3ProcessedData.predictedPos}\r\n            danceFlag={\r\n              dancer3ProcessedData.predictedDance ===\r\n              currentCoachData.actualDance\r\n                ? 1\r\n                : 0\r\n            }\r\n            posFlag={\r\n              currentCoachData.actualPositions.split(\" \")[2] ===\r\n              dancer1ProcessedData.predictedPos\r\n                ? 1\r\n                : 0\r\n            }\r\n          />\r\n          <div className=\"graph\">\r\n            <div className=\"fatigue\">Overall Fatigue</div>\r\n            <Stream currentEmgData={currentEmgData} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"coach\">\r\n          <CoachCard\r\n            currentDance={currentCoachData.actualDance}\r\n            actualPositions={currentCoachData.actualPositions.split(\" \")}\r\n            feedback={[\r\n              currentCoachData.dancer1Feedback,\r\n              currentCoachData.dancer2Feedback,\r\n              currentCoachData.dancer3Feedback,\r\n            ]}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\ScreenHeader.js",["49"],"import \"./ScreenHeader.css\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction ScreenHeader({ screenTitle, screenDesc }) {\r\n  const [currentDateTime, setDateTime] = useState(new Date());\r\n  const [currentDay, setDay] = useState(\"\");\r\n  const [currentDate, setDate] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    function refreshClock() {\r\n      setDateTime(new Date());\r\n      var dateArray = String(currentDateTime).split(\" \");\r\n      setDay(dateArray[0]);\r\n      setDate(dateArray[2] + \" \" + dateArray[1] + \" \" + dateArray[3]);\r\n    }\r\n    const timerId = setInterval(refreshClock, 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerId);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"dashboardDesc\">\r\n        <h1>{screenTitle}</h1>\r\n        <h2>{screenDesc}</h2>\r\n      </div>\r\n      <div className=\"timestamp\">\r\n        <h1>{currentDateTime.toLocaleTimeString()}</h1>\r\n        <h2>{currentDate}</h2>\r\n        <h2>{currentDay}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScreenHeader;\r\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":57,"column":26,"nodeType":"56","messageId":"57","endLine":57,"endColumn":43},{"ruleId":"58","severity":1,"message":"59","line":152,"column":6,"nodeType":"60","endLine":152,"endColumn":8,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"62","line":20,"column":6,"nodeType":"60","endLine":20,"endColumn":8,"suggestions":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'setCurrentEmgData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentDancer1RawData', 'currentDancer2RawData', 'currentDancer3RawData', and 'currentEmgData'. Either include them or remove the dependency array.","ArrayExpression",["66"],"React Hook useEffect has a missing dependency: 'currentDateTime'. Either include it or remove the dependency array.",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [currentDancer1RawData, currentDancer2RawData, currentDancer3RawData, currentEmgData]",{"range":"72","text":"73"},"Update the dependencies array to be: [currentDateTime]",{"range":"74","text":"75"},[4404,4406],"[currentDancer1RawData, currentDancer2RawData, currentDancer3RawData, currentEmgData]",[674,676],"[currentDateTime]"]