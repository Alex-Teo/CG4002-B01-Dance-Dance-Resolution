[{"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\index.js":"1","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\App.js":"3","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\UserCard.js":"4","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\History.js":"5","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Sidebar.js":"6","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\CoachCard.js":"7","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\Dashboard.js":"8","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\ScreenHeader.js":"9","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Analytics.js":"10","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Stream.js":"11"},{"size":519,"mtime":1632880674571,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1629614679416,"results":"14","hashOfConfig":"13"},{"size":622,"mtime":1632886941555,"results":"15","hashOfConfig":"13"},{"size":1122,"mtime":1633632045810,"results":"16","hashOfConfig":"13"},{"size":286,"mtime":1631838605892,"results":"17","hashOfConfig":"13"},{"size":1713,"mtime":1632886679659,"results":"18","hashOfConfig":"13"},{"size":3905,"mtime":1633631931913,"results":"19","hashOfConfig":"13"},{"size":5624,"mtime":1633658174490,"results":"20","hashOfConfig":"13"},{"size":1062,"mtime":1632886928137,"results":"21","hashOfConfig":"13"},{"size":1067,"mtime":1633659929465,"results":"22","hashOfConfig":"13"},{"size":2047,"mtime":1633659634107,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1rbgyic",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\index.js",[],["50","51"],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\App.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\UserCard.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\History.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Sidebar.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\CoachCard.js",[],"C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\screens\\Dashboard.js",["52"],"import \"./Dashboard.css\";\r\nimport UserCard from \"../components/UserCard\";\r\nimport CoachCard from \"../components/CoachCard\";\r\nimport Analytics from \"../components/Analytics\";\r\nimport ScreenHeader from \"../components/ScreenHeader\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst Dashboard = () => {\r\n  // ---------------- useState ---------------- //\r\n  // useState for coach data\r\n  const [currentCoachData, setCurrentCoachData] = useState({\r\n    actualDance: \" \",\r\n    actualPositions: [],\r\n  });\r\n\r\n  //useState for emgArray\r\n  const [emgArray, setEmgArray] = useState([\r\n    {\r\n      Dancer1: 0,\r\n      Dancer2: 0,\r\n      Dancer3: 0,\r\n    },\r\n  ]);\r\n\r\n  // useState for processed data\r\n  const [currentProcessedData, setCurrentProcessedData] = useState({\r\n    predictedDance: \" \",\r\n    dancer1PredictedPos: \" \",\r\n    dancer2PredictedPos: \" \",\r\n    dancer3PredictedPos: \" \",\r\n    syncDelay: \" \",\r\n  });\r\n\r\n  // ---------------- Sockets ---------------- //\r\n  useEffect(() => {\r\n    const socket = io.connect(\"http://localhost:5000\");\r\n\r\n    // Client-server socket initialized\r\n    socket.on(\"connect\", () => {\r\n      console.log(`Client connected with socket.io ID: ${socket.id}`);\r\n    });\r\n\r\n    // Sockets for coach data\r\n    socket.on(\"newCoachData\", (coachData) => {\r\n      setCurrentCoachData({\r\n        actualDance: coachData[\"actualDance\"],\r\n        actualPositions: coachData[\"actualPositions\"].split(\" | \"),\r\n      });\r\n    });\r\n\r\n    // Sockets for raw data\r\n    socket.on(\"newRawData\", (RawData) => {\r\n      var currUserID = RawData[\"userID\"];\r\n      var currentEmgData = emgArray;\r\n      if (currentEmgData.length > 20) currentEmgData.pop();\r\n      var dancer1Emg = 0;\r\n      var dancer2Emg = 0;\r\n      var dancer3Emg = 0;\r\n\r\n      switch (currUserID) {\r\n        case \"0\":\r\n          dancer1Emg = Number(RawData[\"emg\"]);\r\n          dancer2Emg = Number(currentEmgData.at(-1)[\"Dancer2\"]);\r\n          dancer3Emg = Number(currentEmgData.at(-1)[\"Dancer3\"]);\r\n          break;\r\n        case \"1\":\r\n          dancer2Emg = Number(RawData[\"emg\"]);\r\n          dancer1Emg = Number(currentEmgData.at(-1)[\"Dancer1\"]);\r\n          dancer3Emg = Number(currentEmgData.at(-1)[\"Dancer3\"]);\r\n          break;\r\n        case \"2\":\r\n          dancer3Emg = Number(RawData[\"emg\"]);\r\n          dancer1Emg = Number(currentEmgData.at(-1)[\"Dancer1\"]);\r\n          dancer2Emg = Number(currentEmgData.at(-1)[\"Dancer2\"]);\r\n          break;\r\n        default:\r\n          dancer1Emg = Number(currentEmgData.at(-1)[\"Dancer1\"]);\r\n          dancer2Emg = Number(currentEmgData.at(-1)[\"Dancer2\"]);\r\n          dancer3Emg = Number(currentEmgData.at(-1)[\"Dancer3\"]);\r\n      }\r\n\r\n      setEmgArray((emgArray) => [\r\n        ...emgArray,\r\n        { Dancer1: dancer1Emg, Dancer2: dancer2Emg, Dancer3: dancer3Emg },\r\n      ]);\r\n    });\r\n\r\n    // Sockets for processed data\r\n    socket.on(\"newProcessedData\", (ProcessedData) => {\r\n      setCurrentProcessedData({\r\n        predictedDance: ProcessedData[\"predictedDance\"], // dance\r\n        dancer1PredictedPos: ProcessedData[\"predictedPos\"].split(\" | \")[0], // pos1 | pos2 | pos3\r\n        dancer2PredictedPos: ProcessedData[\"predictedPos\"].split(\" | \")[1], // pos1 | pos2 | pos3\r\n        dancer3PredictedPos: ProcessedData[\"predictedPos\"].split(\" | \")[2], // pos1 | pos2 | pos3\r\n        syncDelay: ProcessedData[\"syncDelay\"], // sync\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"dashboardWrapper\">\r\n      <ScreenHeader\r\n        screenTitle=\"Dashboard\"\r\n        screenDesc=\"A closer look at your performance\"\r\n      />\r\n\r\n      <div className=\"analytics\">\r\n        <div className=\"users\">\r\n          <UserCard\r\n            dancerId=\"Dancer 1\"\r\n            delay={currentProcessedData.syncDelay}\r\n            currentDance={currentProcessedData.predictedDance}\r\n            currentPos={currentProcessedData.dancer1PredictedPos}\r\n            coachDance={currentCoachData.actualDance}\r\n            coachPos={currentCoachData.actualPositions}\r\n          />\r\n          <UserCard\r\n            dancerId=\"Dancer 2\"\r\n            delay={currentProcessedData.syncDelay}\r\n            currentDance={currentProcessedData.predictedDance}\r\n            currentPos={currentProcessedData.dancer2PredictedPos}\r\n            coachDance={currentCoachData.actualDance}\r\n            coachPos={currentCoachData.actualPositions}\r\n          />\r\n          <UserCard\r\n            dancerId=\"Dancer 3\"\r\n            delay={currentProcessedData.syncDelay}\r\n            currentDance={currentProcessedData.predictedDance}\r\n            currentPos={currentProcessedData.dancer3PredictedPos}\r\n            coachDance={currentCoachData.actualDance}\r\n            coachPos={currentCoachData.actualPositions}\r\n          />\r\n          <div className=\"graph\">\r\n            <Analytics emgData={emgArray.slice(-21)} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"coach\">\r\n          <CoachCard\r\n            currentDance={currentCoachData.actualDance}\r\n            actualPositions={currentCoachData.actualPositions}\r\n            feedback={[\r\n              currentCoachData.dancer1Feedback,\r\n              currentCoachData.dancer2Feedback,\r\n              currentCoachData.dancer3Feedback,\r\n            ]}\r\n            dancerDance={currentProcessedData.predictedDance}\r\n            dancerPos={[\r\n              currentProcessedData.dancer1PredictedPos,\r\n              currentProcessedData.dancer2PredictedPos,\r\n              currentProcessedData.dancer3PredictedPos,\r\n            ]}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\ScreenHeader.js",["53"],"import \"./ScreenHeader.css\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction ScreenHeader({ screenTitle, screenDesc }) {\r\n  const [currentDateTime, setDateTime] = useState(new Date());\r\n  const [currentDay, setDay] = useState(\"\");\r\n  const [currentDate, setDate] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    function refreshClock() {\r\n      setDateTime(new Date());\r\n      var dateArray = String(currentDateTime).split(\" \");\r\n      setDay(dateArray[0]);\r\n      setDate(dateArray[2] + \" \" + dateArray[1] + \" \" + dateArray[3]);\r\n    }\r\n    const timerId = setInterval(refreshClock, 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerId);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"dashboardDesc\">\r\n        <h1>{screenTitle}</h1>\r\n        <h2>{screenDesc}</h2>\r\n      </div>\r\n      <div className=\"timestamp\">\r\n        <h1>{currentDateTime.toLocaleTimeString()}</h1>\r\n        <h2>{currentDate}</h2>\r\n        <h2>{currentDay}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScreenHeader;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Analytics.js",["54"],"import DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport \"./Analytics.css\";\r\nimport Stream from \"./Stream\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction Analytics({ emgData }) {\r\n  const [title, setTitle] = useState(\"Fatigue\");\r\n  const [dropdownItems, setDropdownItems] = useState([\r\n    \"Gyroscope\",\r\n    \"Accelerometer\",\r\n  ]);\r\n\r\n  const handleChange = (item) => {\r\n    setTitle(item);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const options = [\"Gyroscope\", \"Accelerometer\", \"Fatigue\"];\r\n    const index = options.indexOf(title);\r\n    options.splice(index, 1);\r\n    setDropdownItems(options);\r\n  });\r\n\r\n  return (\r\n    <div className=\"analyticsWrapper\">\r\n      <DropdownButton id=\"dropdown\" title={title}>\r\n        {dropdownItems.map((item) => (\r\n          <Dropdown.Item href=\"#/action-1\" onClick={() => handleChange(item)}>\r\n            {item}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </DropdownButton>\r\n      <Stream data={emgData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Analytics;\r\n","C:\\Users\\Amir\\Desktop\\Capstone\\Dashboard\\frontend\\src\\components\\Stream.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":100,"column":6,"nodeType":"61","endLine":100,"endColumn":8,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":20,"column":6,"nodeType":"61","endLine":20,"endColumn":8,"suggestions":"64"},{"ruleId":"59","severity":1,"message":"65","line":18,"column":3,"nodeType":"66","endLine":18,"endColumn":12,"suggestions":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'emgArray'. Either include it or remove the dependency array.","ArrayExpression",["70"],"React Hook useEffect has a missing dependency: 'currentDateTime'. Either include it or remove the dependency array.",["71"],"React Hook useEffect contains a call to 'setDropdownItems'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [title] as a second argument to the useEffect Hook.","Identifier",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [emgArray]",{"range":"79","text":"80"},"Update the dependencies array to be: [currentDateTime]",{"range":"81","text":"82"},"Add dependencies array: [title]",{"range":"83","text":"84"},[3422,3424],"[emgArray]",[674,676],"[currentDateTime]",[668,668],", [title]"]