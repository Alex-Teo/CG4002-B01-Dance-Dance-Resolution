// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mlp_dance3_mlp_dance3_Pipeline_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_1_2_027,
        buffer_1_1_026,
        buffer_1_0_025,
        weights_1_0_0_01,
        weights_1_0_1_02,
        weights_1_0_2_03,
        weights_1_1_0_04,
        weights_1_1_1_05,
        weights_1_1_2_06,
        weights_1_2_0_07,
        weights_1_2_1_08,
        weights_1_2_2_09,
        weights_1_3_0_010,
        weights_1_3_1_011,
        weights_1_3_2_012,
        weights_1_4_0_013,
        weights_1_4_1_014,
        weights_1_4_2_015,
        weights_1_5_0_016,
        weights_1_5_1_017,
        weights_1_5_2_018,
        weights_1_6_0_019,
        weights_1_6_1_020,
        weights_1_6_2_021,
        weights_1_7_0_022,
        weights_1_7_1_023,
        weights_1_7_2_024,
        buffer_0_0_1_reload,
        buffer_0_1_1_reload,
        buffer_0_2_1_reload,
        buffer_0_3_1_reload,
        buffer_0_4_1_reload,
        buffer_0_5_1_reload,
        buffer_0_6_1_reload,
        buffer_0_7_1_reload,
        buffer_1_2_1_out,
        buffer_1_2_1_out_ap_vld,
        buffer_1_1_1_out,
        buffer_1_1_1_out_ap_vld,
        buffer_1_0_1_out,
        buffer_1_0_1_out_ap_vld,
        grp_fu_1742_p_din0,
        grp_fu_1742_p_din1,
        grp_fu_1742_p_opcode,
        grp_fu_1742_p_dout0,
        grp_fu_1742_p_ce,
        grp_fu_1746_p_din0,
        grp_fu_1746_p_din1,
        grp_fu_1746_p_opcode,
        grp_fu_1746_p_dout0,
        grp_fu_1746_p_ce,
        grp_fu_1750_p_din0,
        grp_fu_1750_p_din1,
        grp_fu_1750_p_opcode,
        grp_fu_1750_p_dout0,
        grp_fu_1750_p_ce,
        grp_fu_1754_p_din0,
        grp_fu_1754_p_din1,
        grp_fu_1754_p_opcode,
        grp_fu_1754_p_dout0,
        grp_fu_1754_p_ce,
        grp_fu_1758_p_din0,
        grp_fu_1758_p_din1,
        grp_fu_1758_p_opcode,
        grp_fu_1758_p_dout0,
        grp_fu_1758_p_ce,
        grp_fu_1762_p_din0,
        grp_fu_1762_p_din1,
        grp_fu_1762_p_opcode,
        grp_fu_1762_p_dout0,
        grp_fu_1762_p_ce,
        grp_fu_1766_p_din0,
        grp_fu_1766_p_din1,
        grp_fu_1766_p_opcode,
        grp_fu_1766_p_dout0,
        grp_fu_1766_p_ce,
        grp_fu_1770_p_din0,
        grp_fu_1770_p_din1,
        grp_fu_1770_p_opcode,
        grp_fu_1770_p_dout0,
        grp_fu_1770_p_ce,
        grp_fu_1774_p_din0,
        grp_fu_1774_p_din1,
        grp_fu_1774_p_opcode,
        grp_fu_1774_p_dout0,
        grp_fu_1774_p_ce,
        grp_fu_554_p_din0,
        grp_fu_554_p_din1,
        grp_fu_554_p_opcode,
        grp_fu_554_p_dout0,
        grp_fu_554_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] buffer_1_2_027;
input  [31:0] buffer_1_1_026;
input  [31:0] buffer_1_0_025;
input  [31:0] weights_1_0_0_01;
input  [31:0] weights_1_0_1_02;
input  [31:0] weights_1_0_2_03;
input  [31:0] weights_1_1_0_04;
input  [31:0] weights_1_1_1_05;
input  [31:0] weights_1_1_2_06;
input  [31:0] weights_1_2_0_07;
input  [31:0] weights_1_2_1_08;
input  [31:0] weights_1_2_2_09;
input  [31:0] weights_1_3_0_010;
input  [31:0] weights_1_3_1_011;
input  [31:0] weights_1_3_2_012;
input  [31:0] weights_1_4_0_013;
input  [31:0] weights_1_4_1_014;
input  [31:0] weights_1_4_2_015;
input  [31:0] weights_1_5_0_016;
input  [31:0] weights_1_5_1_017;
input  [31:0] weights_1_5_2_018;
input  [31:0] weights_1_6_0_019;
input  [31:0] weights_1_6_1_020;
input  [31:0] weights_1_6_2_021;
input  [31:0] weights_1_7_0_022;
input  [31:0] weights_1_7_1_023;
input  [31:0] weights_1_7_2_024;
input  [31:0] buffer_0_0_1_reload;
input  [31:0] buffer_0_1_1_reload;
input  [31:0] buffer_0_2_1_reload;
input  [31:0] buffer_0_3_1_reload;
input  [31:0] buffer_0_4_1_reload;
input  [31:0] buffer_0_5_1_reload;
input  [31:0] buffer_0_6_1_reload;
input  [31:0] buffer_0_7_1_reload;
output  [31:0] buffer_1_2_1_out;
output   buffer_1_2_1_out_ap_vld;
output  [31:0] buffer_1_1_1_out;
output   buffer_1_1_1_out_ap_vld;
output  [31:0] buffer_1_0_1_out;
output   buffer_1_0_1_out_ap_vld;
output  [31:0] grp_fu_1742_p_din0;
output  [31:0] grp_fu_1742_p_din1;
output  [1:0] grp_fu_1742_p_opcode;
input  [31:0] grp_fu_1742_p_dout0;
output   grp_fu_1742_p_ce;
output  [31:0] grp_fu_1746_p_din0;
output  [31:0] grp_fu_1746_p_din1;
output  [1:0] grp_fu_1746_p_opcode;
input  [31:0] grp_fu_1746_p_dout0;
output   grp_fu_1746_p_ce;
output  [31:0] grp_fu_1750_p_din0;
output  [31:0] grp_fu_1750_p_din1;
output  [1:0] grp_fu_1750_p_opcode;
input  [31:0] grp_fu_1750_p_dout0;
output   grp_fu_1750_p_ce;
output  [31:0] grp_fu_1754_p_din0;
output  [31:0] grp_fu_1754_p_din1;
output  [1:0] grp_fu_1754_p_opcode;
input  [31:0] grp_fu_1754_p_dout0;
output   grp_fu_1754_p_ce;
output  [31:0] grp_fu_1758_p_din0;
output  [31:0] grp_fu_1758_p_din1;
output  [1:0] grp_fu_1758_p_opcode;
input  [31:0] grp_fu_1758_p_dout0;
output   grp_fu_1758_p_ce;
output  [31:0] grp_fu_1762_p_din0;
output  [31:0] grp_fu_1762_p_din1;
output  [1:0] grp_fu_1762_p_opcode;
input  [31:0] grp_fu_1762_p_dout0;
output   grp_fu_1762_p_ce;
output  [31:0] grp_fu_1766_p_din0;
output  [31:0] grp_fu_1766_p_din1;
output  [1:0] grp_fu_1766_p_opcode;
input  [31:0] grp_fu_1766_p_dout0;
output   grp_fu_1766_p_ce;
output  [31:0] grp_fu_1770_p_din0;
output  [31:0] grp_fu_1770_p_din1;
output  [1:0] grp_fu_1770_p_opcode;
input  [31:0] grp_fu_1770_p_dout0;
output   grp_fu_1770_p_ce;
output  [31:0] grp_fu_1774_p_din0;
output  [31:0] grp_fu_1774_p_din1;
output  [1:0] grp_fu_1774_p_opcode;
input  [31:0] grp_fu_1774_p_dout0;
output   grp_fu_1774_p_ce;
output  [31:0] grp_fu_554_p_din0;
output  [31:0] grp_fu_554_p_din1;
output  [4:0] grp_fu_554_p_opcode;
input  [0:0] grp_fu_554_p_dout0;
output   grp_fu_554_p_ce;

reg ap_idle;
reg buffer_1_2_1_out_ap_vld;
reg buffer_1_1_1_out_ap_vld;
reg buffer_1_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_state39_pp0_stage0_iter38;
wire    ap_block_state40_pp0_stage0_iter39;
wire    ap_block_state41_pp0_stage0_iter40;
wire    ap_block_state42_pp0_stage0_iter41;
wire    ap_block_state43_pp0_stage0_iter42;
wire    ap_block_state44_pp0_stage0_iter43;
wire    ap_block_state45_pp0_stage0_iter44;
wire    ap_block_state46_pp0_stage0_iter45;
wire    ap_block_state47_pp0_stage0_iter46;
wire    ap_block_state48_pp0_stage0_iter47;
wire    ap_block_state49_pp0_stage0_iter48;
wire    ap_block_state50_pp0_stage0_iter49;
wire    ap_block_state51_pp0_stage0_iter50;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln155_fu_484_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] i_4_reg_829;
reg   [1:0] i_4_reg_829_pp0_iter1_reg;
reg   [1:0] i_4_reg_829_pp0_iter2_reg;
reg   [1:0] i_4_reg_829_pp0_iter3_reg;
reg   [1:0] i_4_reg_829_pp0_iter4_reg;
reg   [1:0] i_4_reg_829_pp0_iter5_reg;
reg   [1:0] i_4_reg_829_pp0_iter6_reg;
reg   [1:0] i_4_reg_829_pp0_iter7_reg;
reg   [1:0] i_4_reg_829_pp0_iter8_reg;
reg   [1:0] i_4_reg_829_pp0_iter9_reg;
reg   [1:0] i_4_reg_829_pp0_iter10_reg;
reg   [1:0] i_4_reg_829_pp0_iter11_reg;
reg   [1:0] i_4_reg_829_pp0_iter12_reg;
reg   [1:0] i_4_reg_829_pp0_iter13_reg;
reg   [1:0] i_4_reg_829_pp0_iter14_reg;
reg   [1:0] i_4_reg_829_pp0_iter15_reg;
reg   [1:0] i_4_reg_829_pp0_iter16_reg;
reg   [1:0] i_4_reg_829_pp0_iter17_reg;
reg   [1:0] i_4_reg_829_pp0_iter18_reg;
reg   [1:0] i_4_reg_829_pp0_iter19_reg;
reg   [1:0] i_4_reg_829_pp0_iter20_reg;
reg   [1:0] i_4_reg_829_pp0_iter21_reg;
reg   [1:0] i_4_reg_829_pp0_iter22_reg;
reg   [1:0] i_4_reg_829_pp0_iter23_reg;
reg   [1:0] i_4_reg_829_pp0_iter24_reg;
reg   [1:0] i_4_reg_829_pp0_iter25_reg;
reg   [1:0] i_4_reg_829_pp0_iter26_reg;
reg   [1:0] i_4_reg_829_pp0_iter27_reg;
reg   [1:0] i_4_reg_829_pp0_iter28_reg;
reg   [1:0] i_4_reg_829_pp0_iter29_reg;
reg   [1:0] i_4_reg_829_pp0_iter30_reg;
reg   [1:0] i_4_reg_829_pp0_iter31_reg;
reg   [1:0] i_4_reg_829_pp0_iter32_reg;
reg   [1:0] i_4_reg_829_pp0_iter33_reg;
reg   [1:0] i_4_reg_829_pp0_iter34_reg;
reg   [1:0] i_4_reg_829_pp0_iter35_reg;
reg   [1:0] i_4_reg_829_pp0_iter36_reg;
reg   [1:0] i_4_reg_829_pp0_iter37_reg;
reg   [1:0] i_4_reg_829_pp0_iter38_reg;
reg   [1:0] i_4_reg_829_pp0_iter39_reg;
reg   [1:0] i_4_reg_829_pp0_iter40_reg;
reg   [1:0] i_4_reg_829_pp0_iter41_reg;
reg   [1:0] i_4_reg_829_pp0_iter42_reg;
reg   [1:0] i_4_reg_829_pp0_iter43_reg;
reg   [1:0] i_4_reg_829_pp0_iter44_reg;
reg   [1:0] i_4_reg_829_pp0_iter45_reg;
reg   [1:0] i_4_reg_829_pp0_iter46_reg;
reg   [1:0] i_4_reg_829_pp0_iter47_reg;
reg   [1:0] i_4_reg_829_pp0_iter48_reg;
reg   [1:0] i_4_reg_829_pp0_iter49_reg;
reg   [0:0] icmp_ln155_reg_841;
reg   [0:0] icmp_ln155_reg_841_pp0_iter1_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter2_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter3_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter4_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter5_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter6_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter7_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter8_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter9_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter10_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter11_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter12_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter13_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter14_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter15_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter16_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter17_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter18_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter19_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter20_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter21_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter22_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter23_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter24_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter25_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter26_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter27_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter28_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter29_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter30_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter31_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter32_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter33_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter34_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter35_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter36_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter37_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter38_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter39_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter40_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter41_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter42_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter43_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter44_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter45_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter46_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter47_reg;
reg   [0:0] icmp_ln155_reg_841_pp0_iter48_reg;
wire   [31:0] tmp_4_fu_496_p5;
wire   [31:0] grp_fu_423_p2;
reg   [31:0] mul_i_reg_850;
wire   [31:0] tmp_5_fu_514_p5;
reg   [31:0] product_reg_860;
wire   [31:0] grp_fu_428_p2;
reg   [31:0] mul_1_i_reg_865;
wire   [31:0] tmp_6_fu_523_p5;
reg   [31:0] product_1_reg_875;
wire   [31:0] grp_fu_432_p2;
reg   [31:0] mul_2_i_reg_880;
wire   [31:0] tmp_7_fu_532_p5;
reg   [31:0] product_2_reg_890;
wire   [31:0] grp_fu_436_p2;
reg   [31:0] mul_3_i_reg_895;
wire   [31:0] tmp_8_fu_541_p5;
reg   [31:0] product_3_reg_905;
wire   [31:0] grp_fu_440_p2;
reg   [31:0] mul_4_i_reg_910;
wire   [31:0] tmp_s_fu_550_p5;
reg   [31:0] product_4_reg_920;
wire   [31:0] grp_fu_444_p2;
reg   [31:0] mul_5_i_reg_925;
wire   [31:0] tmp_1_fu_559_p5;
reg   [31:0] product_5_reg_935;
wire   [31:0] grp_fu_448_p2;
reg   [31:0] mul_6_i_reg_940;
wire   [31:0] tmp_2_fu_568_p5;
reg   [31:0] product_6_reg_950;
wire   [31:0] grp_fu_452_p2;
reg   [31:0] mul_7_i_reg_955;
reg   [31:0] product_7_reg_960;
wire   [31:0] bias_1_q0;
reg   [31:0] a_assign_1_reg_975;
reg   [31:0] a_assign_1_reg_975_pp0_iter49_reg;
wire   [2:0] bias_1_address0;
reg    bias_1_ce0;
wire   [63:0] zext_ln155_fu_577_p1;
wire    ap_block_pp0_stage0;
reg   [1:0] i_fu_122;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_4;
wire   [1:0] add_ln155_fu_490_p2;
reg   [31:0] buffer_1_1_fu_126;
wire   [31:0] buffer_1_1_4_fu_622_p3;
reg   [31:0] buffer_1_1_1_fu_130;
reg   [31:0] buffer_1_1_2_fu_134;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln32_fu_581_p1;
wire   [7:0] tmp_3_fu_584_p4;
wire   [22:0] trunc_ln32_fu_594_p1;
wire   [0:0] icmp_ln32_1_fu_604_p2;
wire   [0:0] icmp_ln32_fu_598_p2;
wire   [0:0] or_ln32_fu_610_p2;
wire   [0:0] and_ln32_fu_616_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg    ap_loop_exit_ready_pp0_iter37_reg;
reg    ap_loop_exit_ready_pp0_iter38_reg;
reg    ap_loop_exit_ready_pp0_iter39_reg;
reg    ap_loop_exit_ready_pp0_iter40_reg;
reg    ap_loop_exit_ready_pp0_iter41_reg;
reg    ap_loop_exit_ready_pp0_iter42_reg;
reg    ap_loop_exit_ready_pp0_iter43_reg;
reg    ap_loop_exit_ready_pp0_iter44_reg;
reg    ap_loop_exit_ready_pp0_iter45_reg;
reg    ap_loop_exit_ready_pp0_iter46_reg;
reg    ap_loop_exit_ready_pp0_iter47_reg;
reg    ap_loop_exit_ready_pp0_iter48_reg;
reg    ap_loop_exit_ready_pp0_iter49_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_1809;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mlp_dance3_mlp_dance3_Pipeline_layer1_bias_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bias_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_1_address0),
    .ce0(bias_1_ce0),
    .q0(bias_1_q0)
);

mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buffer_0_0_1_reload),
    .din1(tmp_4_fu_496_p5),
    .ce(1'b1),
    .dout(grp_fu_423_p2)
);

mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buffer_0_1_1_reload),
    .din1(tmp_5_fu_514_p5),
    .ce(1'b1),
    .dout(grp_fu_428_p2)
);

mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buffer_0_2_1_reload),
    .din1(tmp_6_fu_523_p5),
    .ce(1'b1),
    .dout(grp_fu_432_p2)
);

mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buffer_0_3_1_reload),
    .din1(tmp_7_fu_532_p5),
    .ce(1'b1),
    .dout(grp_fu_436_p2)
);

mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buffer_0_4_1_reload),
    .din1(tmp_8_fu_541_p5),
    .ce(1'b1),
    .dout(grp_fu_440_p2)
);

mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buffer_0_5_1_reload),
    .din1(tmp_s_fu_550_p5),
    .ce(1'b1),
    .dout(grp_fu_444_p2)
);

mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buffer_0_6_1_reload),
    .din1(tmp_1_fu_559_p5),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(buffer_0_7_1_reload),
    .din1(tmp_2_fu_568_p5),
    .ce(1'b1),
    .dout(grp_fu_452_p2)
);

mlp_dance3_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U52(
    .din0(weights_1_0_0_01),
    .din1(weights_1_0_1_02),
    .din2(weights_1_0_2_03),
    .din3(ap_sig_allocacmp_i_4),
    .dout(tmp_4_fu_496_p5)
);

mlp_dance3_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U53(
    .din0(weights_1_1_0_04),
    .din1(weights_1_1_1_05),
    .din2(weights_1_1_2_06),
    .din3(i_4_reg_829_pp0_iter4_reg),
    .dout(tmp_5_fu_514_p5)
);

mlp_dance3_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U54(
    .din0(weights_1_2_0_07),
    .din1(weights_1_2_1_08),
    .din2(weights_1_2_2_09),
    .din3(i_4_reg_829_pp0_iter9_reg),
    .dout(tmp_6_fu_523_p5)
);

mlp_dance3_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U55(
    .din0(weights_1_3_0_010),
    .din1(weights_1_3_1_011),
    .din2(weights_1_3_2_012),
    .din3(i_4_reg_829_pp0_iter14_reg),
    .dout(tmp_7_fu_532_p5)
);

mlp_dance3_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U56(
    .din0(weights_1_4_0_013),
    .din1(weights_1_4_1_014),
    .din2(weights_1_4_2_015),
    .din3(i_4_reg_829_pp0_iter19_reg),
    .dout(tmp_8_fu_541_p5)
);

mlp_dance3_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U57(
    .din0(weights_1_5_0_016),
    .din1(weights_1_5_1_017),
    .din2(weights_1_5_2_018),
    .din3(i_4_reg_829_pp0_iter24_reg),
    .dout(tmp_s_fu_550_p5)
);

mlp_dance3_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U58(
    .din0(weights_1_6_0_019),
    .din1(weights_1_6_1_020),
    .din2(weights_1_6_2_021),
    .din3(i_4_reg_829_pp0_iter29_reg),
    .dout(tmp_1_fu_559_p5)
);

mlp_dance3_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U59(
    .din0(weights_1_7_0_022),
    .din1(weights_1_7_1_023),
    .din2(weights_1_7_2_024),
    .din3(i_4_reg_829_pp0_iter34_reg),
    .dout(tmp_2_fu_568_p5)
);

mlp_dance3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter49_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            buffer_1_1_1_fu_130 <= buffer_1_1_026;
        end else if (((ap_enable_reg_pp0_iter50 == 1'b1) & (i_4_reg_829_pp0_iter49_reg == 2'd1))) begin
            buffer_1_1_1_fu_130 <= buffer_1_1_4_fu_622_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            buffer_1_1_2_fu_134 <= buffer_1_2_027;
        end else if ((1'b1 == ap_condition_1809)) begin
            buffer_1_1_2_fu_134 <= buffer_1_1_4_fu_622_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            buffer_1_1_fu_126 <= buffer_1_0_025;
        end else if (((ap_enable_reg_pp0_iter50 == 1'b1) & (i_4_reg_829_pp0_iter49_reg == 2'd0))) begin
            buffer_1_1_fu_126 <= buffer_1_1_4_fu_622_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln155_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_122 <= add_ln155_fu_490_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_122 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_assign_1_reg_975 <= grp_fu_1774_p_dout0;
        a_assign_1_reg_975_pp0_iter49_reg <= a_assign_1_reg_975;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
        ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
        ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
        ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
        ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
        ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
        ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
        ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
        ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
        ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
        ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
        ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i_4_reg_829_pp0_iter10_reg <= i_4_reg_829_pp0_iter9_reg;
        i_4_reg_829_pp0_iter11_reg <= i_4_reg_829_pp0_iter10_reg;
        i_4_reg_829_pp0_iter12_reg <= i_4_reg_829_pp0_iter11_reg;
        i_4_reg_829_pp0_iter13_reg <= i_4_reg_829_pp0_iter12_reg;
        i_4_reg_829_pp0_iter14_reg <= i_4_reg_829_pp0_iter13_reg;
        i_4_reg_829_pp0_iter15_reg <= i_4_reg_829_pp0_iter14_reg;
        i_4_reg_829_pp0_iter16_reg <= i_4_reg_829_pp0_iter15_reg;
        i_4_reg_829_pp0_iter17_reg <= i_4_reg_829_pp0_iter16_reg;
        i_4_reg_829_pp0_iter18_reg <= i_4_reg_829_pp0_iter17_reg;
        i_4_reg_829_pp0_iter19_reg <= i_4_reg_829_pp0_iter18_reg;
        i_4_reg_829_pp0_iter20_reg <= i_4_reg_829_pp0_iter19_reg;
        i_4_reg_829_pp0_iter21_reg <= i_4_reg_829_pp0_iter20_reg;
        i_4_reg_829_pp0_iter22_reg <= i_4_reg_829_pp0_iter21_reg;
        i_4_reg_829_pp0_iter23_reg <= i_4_reg_829_pp0_iter22_reg;
        i_4_reg_829_pp0_iter24_reg <= i_4_reg_829_pp0_iter23_reg;
        i_4_reg_829_pp0_iter25_reg <= i_4_reg_829_pp0_iter24_reg;
        i_4_reg_829_pp0_iter26_reg <= i_4_reg_829_pp0_iter25_reg;
        i_4_reg_829_pp0_iter27_reg <= i_4_reg_829_pp0_iter26_reg;
        i_4_reg_829_pp0_iter28_reg <= i_4_reg_829_pp0_iter27_reg;
        i_4_reg_829_pp0_iter29_reg <= i_4_reg_829_pp0_iter28_reg;
        i_4_reg_829_pp0_iter2_reg <= i_4_reg_829_pp0_iter1_reg;
        i_4_reg_829_pp0_iter30_reg <= i_4_reg_829_pp0_iter29_reg;
        i_4_reg_829_pp0_iter31_reg <= i_4_reg_829_pp0_iter30_reg;
        i_4_reg_829_pp0_iter32_reg <= i_4_reg_829_pp0_iter31_reg;
        i_4_reg_829_pp0_iter33_reg <= i_4_reg_829_pp0_iter32_reg;
        i_4_reg_829_pp0_iter34_reg <= i_4_reg_829_pp0_iter33_reg;
        i_4_reg_829_pp0_iter35_reg <= i_4_reg_829_pp0_iter34_reg;
        i_4_reg_829_pp0_iter36_reg <= i_4_reg_829_pp0_iter35_reg;
        i_4_reg_829_pp0_iter37_reg <= i_4_reg_829_pp0_iter36_reg;
        i_4_reg_829_pp0_iter38_reg <= i_4_reg_829_pp0_iter37_reg;
        i_4_reg_829_pp0_iter39_reg <= i_4_reg_829_pp0_iter38_reg;
        i_4_reg_829_pp0_iter3_reg <= i_4_reg_829_pp0_iter2_reg;
        i_4_reg_829_pp0_iter40_reg <= i_4_reg_829_pp0_iter39_reg;
        i_4_reg_829_pp0_iter41_reg <= i_4_reg_829_pp0_iter40_reg;
        i_4_reg_829_pp0_iter42_reg <= i_4_reg_829_pp0_iter41_reg;
        i_4_reg_829_pp0_iter43_reg <= i_4_reg_829_pp0_iter42_reg;
        i_4_reg_829_pp0_iter44_reg <= i_4_reg_829_pp0_iter43_reg;
        i_4_reg_829_pp0_iter45_reg <= i_4_reg_829_pp0_iter44_reg;
        i_4_reg_829_pp0_iter46_reg <= i_4_reg_829_pp0_iter45_reg;
        i_4_reg_829_pp0_iter47_reg <= i_4_reg_829_pp0_iter46_reg;
        i_4_reg_829_pp0_iter48_reg <= i_4_reg_829_pp0_iter47_reg;
        i_4_reg_829_pp0_iter49_reg <= i_4_reg_829_pp0_iter48_reg;
        i_4_reg_829_pp0_iter4_reg <= i_4_reg_829_pp0_iter3_reg;
        i_4_reg_829_pp0_iter5_reg <= i_4_reg_829_pp0_iter4_reg;
        i_4_reg_829_pp0_iter6_reg <= i_4_reg_829_pp0_iter5_reg;
        i_4_reg_829_pp0_iter7_reg <= i_4_reg_829_pp0_iter6_reg;
        i_4_reg_829_pp0_iter8_reg <= i_4_reg_829_pp0_iter7_reg;
        i_4_reg_829_pp0_iter9_reg <= i_4_reg_829_pp0_iter8_reg;
        icmp_ln155_reg_841_pp0_iter10_reg <= icmp_ln155_reg_841_pp0_iter9_reg;
        icmp_ln155_reg_841_pp0_iter11_reg <= icmp_ln155_reg_841_pp0_iter10_reg;
        icmp_ln155_reg_841_pp0_iter12_reg <= icmp_ln155_reg_841_pp0_iter11_reg;
        icmp_ln155_reg_841_pp0_iter13_reg <= icmp_ln155_reg_841_pp0_iter12_reg;
        icmp_ln155_reg_841_pp0_iter14_reg <= icmp_ln155_reg_841_pp0_iter13_reg;
        icmp_ln155_reg_841_pp0_iter15_reg <= icmp_ln155_reg_841_pp0_iter14_reg;
        icmp_ln155_reg_841_pp0_iter16_reg <= icmp_ln155_reg_841_pp0_iter15_reg;
        icmp_ln155_reg_841_pp0_iter17_reg <= icmp_ln155_reg_841_pp0_iter16_reg;
        icmp_ln155_reg_841_pp0_iter18_reg <= icmp_ln155_reg_841_pp0_iter17_reg;
        icmp_ln155_reg_841_pp0_iter19_reg <= icmp_ln155_reg_841_pp0_iter18_reg;
        icmp_ln155_reg_841_pp0_iter20_reg <= icmp_ln155_reg_841_pp0_iter19_reg;
        icmp_ln155_reg_841_pp0_iter21_reg <= icmp_ln155_reg_841_pp0_iter20_reg;
        icmp_ln155_reg_841_pp0_iter22_reg <= icmp_ln155_reg_841_pp0_iter21_reg;
        icmp_ln155_reg_841_pp0_iter23_reg <= icmp_ln155_reg_841_pp0_iter22_reg;
        icmp_ln155_reg_841_pp0_iter24_reg <= icmp_ln155_reg_841_pp0_iter23_reg;
        icmp_ln155_reg_841_pp0_iter25_reg <= icmp_ln155_reg_841_pp0_iter24_reg;
        icmp_ln155_reg_841_pp0_iter26_reg <= icmp_ln155_reg_841_pp0_iter25_reg;
        icmp_ln155_reg_841_pp0_iter27_reg <= icmp_ln155_reg_841_pp0_iter26_reg;
        icmp_ln155_reg_841_pp0_iter28_reg <= icmp_ln155_reg_841_pp0_iter27_reg;
        icmp_ln155_reg_841_pp0_iter29_reg <= icmp_ln155_reg_841_pp0_iter28_reg;
        icmp_ln155_reg_841_pp0_iter2_reg <= icmp_ln155_reg_841_pp0_iter1_reg;
        icmp_ln155_reg_841_pp0_iter30_reg <= icmp_ln155_reg_841_pp0_iter29_reg;
        icmp_ln155_reg_841_pp0_iter31_reg <= icmp_ln155_reg_841_pp0_iter30_reg;
        icmp_ln155_reg_841_pp0_iter32_reg <= icmp_ln155_reg_841_pp0_iter31_reg;
        icmp_ln155_reg_841_pp0_iter33_reg <= icmp_ln155_reg_841_pp0_iter32_reg;
        icmp_ln155_reg_841_pp0_iter34_reg <= icmp_ln155_reg_841_pp0_iter33_reg;
        icmp_ln155_reg_841_pp0_iter35_reg <= icmp_ln155_reg_841_pp0_iter34_reg;
        icmp_ln155_reg_841_pp0_iter36_reg <= icmp_ln155_reg_841_pp0_iter35_reg;
        icmp_ln155_reg_841_pp0_iter37_reg <= icmp_ln155_reg_841_pp0_iter36_reg;
        icmp_ln155_reg_841_pp0_iter38_reg <= icmp_ln155_reg_841_pp0_iter37_reg;
        icmp_ln155_reg_841_pp0_iter39_reg <= icmp_ln155_reg_841_pp0_iter38_reg;
        icmp_ln155_reg_841_pp0_iter3_reg <= icmp_ln155_reg_841_pp0_iter2_reg;
        icmp_ln155_reg_841_pp0_iter40_reg <= icmp_ln155_reg_841_pp0_iter39_reg;
        icmp_ln155_reg_841_pp0_iter41_reg <= icmp_ln155_reg_841_pp0_iter40_reg;
        icmp_ln155_reg_841_pp0_iter42_reg <= icmp_ln155_reg_841_pp0_iter41_reg;
        icmp_ln155_reg_841_pp0_iter43_reg <= icmp_ln155_reg_841_pp0_iter42_reg;
        icmp_ln155_reg_841_pp0_iter44_reg <= icmp_ln155_reg_841_pp0_iter43_reg;
        icmp_ln155_reg_841_pp0_iter45_reg <= icmp_ln155_reg_841_pp0_iter44_reg;
        icmp_ln155_reg_841_pp0_iter46_reg <= icmp_ln155_reg_841_pp0_iter45_reg;
        icmp_ln155_reg_841_pp0_iter47_reg <= icmp_ln155_reg_841_pp0_iter46_reg;
        icmp_ln155_reg_841_pp0_iter48_reg <= icmp_ln155_reg_841_pp0_iter47_reg;
        icmp_ln155_reg_841_pp0_iter4_reg <= icmp_ln155_reg_841_pp0_iter3_reg;
        icmp_ln155_reg_841_pp0_iter5_reg <= icmp_ln155_reg_841_pp0_iter4_reg;
        icmp_ln155_reg_841_pp0_iter6_reg <= icmp_ln155_reg_841_pp0_iter5_reg;
        icmp_ln155_reg_841_pp0_iter7_reg <= icmp_ln155_reg_841_pp0_iter6_reg;
        icmp_ln155_reg_841_pp0_iter8_reg <= icmp_ln155_reg_841_pp0_iter7_reg;
        icmp_ln155_reg_841_pp0_iter9_reg <= icmp_ln155_reg_841_pp0_iter8_reg;
        mul_1_i_reg_865 <= grp_fu_428_p2;
        mul_2_i_reg_880 <= grp_fu_432_p2;
        mul_3_i_reg_895 <= grp_fu_436_p2;
        mul_4_i_reg_910 <= grp_fu_440_p2;
        mul_5_i_reg_925 <= grp_fu_444_p2;
        mul_6_i_reg_940 <= grp_fu_448_p2;
        mul_7_i_reg_955 <= grp_fu_452_p2;
        mul_i_reg_850 <= grp_fu_423_p2;
        product_1_reg_875 <= grp_fu_1746_p_dout0;
        product_2_reg_890 <= grp_fu_1750_p_dout0;
        product_3_reg_905 <= grp_fu_1754_p_dout0;
        product_4_reg_920 <= grp_fu_1758_p_dout0;
        product_5_reg_935 <= grp_fu_1762_p_dout0;
        product_6_reg_950 <= grp_fu_1766_p_dout0;
        product_7_reg_960 <= grp_fu_1770_p_dout0;
        product_reg_860 <= grp_fu_1742_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_4_reg_829 <= ap_sig_allocacmp_i_4;
        i_4_reg_829_pp0_iter1_reg <= i_4_reg_829;
        icmp_ln155_reg_841 <= icmp_ln155_fu_484_p2;
        icmp_ln155_reg_841_pp0_iter1_reg <= icmp_ln155_reg_841;
    end
end

always @ (*) begin
    if (((icmp_ln155_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter49_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter43 == 1'b1))) begin
        bias_1_ce0 = 1'b1;
    end else begin
        bias_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln155_reg_841_pp0_iter48_reg == 1'd1))) begin
        buffer_1_0_1_out_ap_vld = 1'b1;
    end else begin
        buffer_1_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln155_reg_841_pp0_iter48_reg == 1'd1))) begin
        buffer_1_1_1_out_ap_vld = 1'b1;
    end else begin
        buffer_1_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln155_reg_841_pp0_iter48_reg == 1'd1))) begin
        buffer_1_2_1_out_ap_vld = 1'b1;
    end else begin
        buffer_1_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln155_fu_490_p2 = (ap_sig_allocacmp_i_4 + 2'd1);

assign and_ln32_fu_616_p2 = (or_ln32_fu_610_p2 & grp_fu_554_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1809 = (~(i_4_reg_829_pp0_iter49_reg == 2'd1) & ~(i_4_reg_829_pp0_iter49_reg == 2'd0) & (ap_enable_reg_pp0_iter50 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bias_1_address0 = zext_ln155_fu_577_p1;

assign bitcast_ln32_fu_581_p1 = a_assign_1_reg_975_pp0_iter49_reg;

assign buffer_1_0_1_out = buffer_1_1_fu_126;

assign buffer_1_1_1_out = buffer_1_1_1_fu_130;

assign buffer_1_1_4_fu_622_p3 = ((and_ln32_fu_616_p2[0:0] == 1'b1) ? a_assign_1_reg_975_pp0_iter49_reg : 32'd0);

assign buffer_1_2_1_out = buffer_1_1_2_fu_134;

assign grp_fu_1742_p_ce = 1'b1;

assign grp_fu_1742_p_din0 = mul_i_reg_850;

assign grp_fu_1742_p_din1 = 32'd0;

assign grp_fu_1742_p_opcode = 2'd0;

assign grp_fu_1746_p_ce = 1'b1;

assign grp_fu_1746_p_din0 = product_reg_860;

assign grp_fu_1746_p_din1 = mul_1_i_reg_865;

assign grp_fu_1746_p_opcode = 2'd0;

assign grp_fu_1750_p_ce = 1'b1;

assign grp_fu_1750_p_din0 = product_1_reg_875;

assign grp_fu_1750_p_din1 = mul_2_i_reg_880;

assign grp_fu_1750_p_opcode = 2'd0;

assign grp_fu_1754_p_ce = 1'b1;

assign grp_fu_1754_p_din0 = product_2_reg_890;

assign grp_fu_1754_p_din1 = mul_3_i_reg_895;

assign grp_fu_1754_p_opcode = 2'd0;

assign grp_fu_1758_p_ce = 1'b1;

assign grp_fu_1758_p_din0 = product_3_reg_905;

assign grp_fu_1758_p_din1 = mul_4_i_reg_910;

assign grp_fu_1758_p_opcode = 2'd0;

assign grp_fu_1762_p_ce = 1'b1;

assign grp_fu_1762_p_din0 = product_4_reg_920;

assign grp_fu_1762_p_din1 = mul_5_i_reg_925;

assign grp_fu_1762_p_opcode = 2'd0;

assign grp_fu_1766_p_ce = 1'b1;

assign grp_fu_1766_p_din0 = product_5_reg_935;

assign grp_fu_1766_p_din1 = mul_6_i_reg_940;

assign grp_fu_1766_p_opcode = 2'd0;

assign grp_fu_1770_p_ce = 1'b1;

assign grp_fu_1770_p_din0 = product_6_reg_950;

assign grp_fu_1770_p_din1 = mul_7_i_reg_955;

assign grp_fu_1770_p_opcode = 2'd0;

assign grp_fu_1774_p_ce = 1'b1;

assign grp_fu_1774_p_din0 = product_7_reg_960;

assign grp_fu_1774_p_din1 = bias_1_q0;

assign grp_fu_1774_p_opcode = 2'd0;

assign grp_fu_554_p_ce = 1'b1;

assign grp_fu_554_p_din0 = a_assign_1_reg_975;

assign grp_fu_554_p_din1 = 32'd0;

assign grp_fu_554_p_opcode = 5'd2;

assign icmp_ln155_fu_484_p2 = ((ap_sig_allocacmp_i_4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_604_p2 = ((trunc_ln32_fu_594_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_598_p2 = ((tmp_3_fu_584_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln32_fu_610_p2 = (icmp_ln32_fu_598_p2 | icmp_ln32_1_fu_604_p2);

assign tmp_3_fu_584_p4 = {{bitcast_ln32_fu_581_p1[30:23]}};

assign trunc_ln32_fu_594_p1 = bitcast_ln32_fu_581_p1[22:0];

assign zext_ln155_fu_577_p1 = i_4_reg_829_pp0_iter42_reg;

endmodule //mlp_dance3_mlp_dance3_Pipeline_layer1
