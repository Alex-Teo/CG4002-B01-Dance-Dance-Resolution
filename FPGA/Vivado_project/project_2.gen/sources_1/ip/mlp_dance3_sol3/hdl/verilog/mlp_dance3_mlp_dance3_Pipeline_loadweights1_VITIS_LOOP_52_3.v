// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mlp_dance3_mlp_dance3_Pipeline_loadweights1_VITIS_LOOP_52_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        S_AXIS_V_TVALID,
        weights_1_7_2_024,
        weights_1_7_1_023,
        weights_1_7_0_022,
        weights_1_6_2_021,
        weights_1_6_1_020,
        weights_1_6_0_019,
        weights_1_5_2_018,
        weights_1_5_1_017,
        weights_1_5_0_016,
        weights_1_4_2_015,
        weights_1_4_1_014,
        weights_1_4_0_013,
        weights_1_3_2_012,
        weights_1_3_1_011,
        weights_1_3_0_010,
        weights_1_2_2_09,
        weights_1_2_1_08,
        weights_1_2_0_07,
        weights_1_1_2_06,
        weights_1_1_1_05,
        weights_1_1_0_04,
        weights_1_0_2_03,
        weights_1_0_1_02,
        weights_1_0_0_01,
        S_AXIS_V_TDATA,
        S_AXIS_V_TREADY,
        weights_1_7_2_2_out,
        weights_1_7_2_2_out_ap_vld,
        weights_1_7_1_2_out,
        weights_1_7_1_2_out_ap_vld,
        weights_1_7_0_2_out,
        weights_1_7_0_2_out_ap_vld,
        weights_1_6_2_2_out,
        weights_1_6_2_2_out_ap_vld,
        weights_1_6_1_2_out,
        weights_1_6_1_2_out_ap_vld,
        weights_1_6_0_2_out,
        weights_1_6_0_2_out_ap_vld,
        weights_1_5_2_2_out,
        weights_1_5_2_2_out_ap_vld,
        weights_1_5_1_2_out,
        weights_1_5_1_2_out_ap_vld,
        weights_1_5_0_2_out,
        weights_1_5_0_2_out_ap_vld,
        weights_1_4_2_2_out,
        weights_1_4_2_2_out_ap_vld,
        weights_1_4_1_2_out,
        weights_1_4_1_2_out_ap_vld,
        weights_1_4_0_2_out,
        weights_1_4_0_2_out_ap_vld,
        weights_1_3_2_2_out,
        weights_1_3_2_2_out_ap_vld,
        weights_1_3_1_2_out,
        weights_1_3_1_2_out_ap_vld,
        weights_1_3_0_2_out,
        weights_1_3_0_2_out_ap_vld,
        weights_1_2_2_2_out,
        weights_1_2_2_2_out_ap_vld,
        weights_1_2_1_2_out,
        weights_1_2_1_2_out_ap_vld,
        weights_1_2_0_2_out,
        weights_1_2_0_2_out_ap_vld,
        weights_1_1_2_2_out,
        weights_1_1_2_2_out_ap_vld,
        weights_1_1_1_2_out,
        weights_1_1_1_2_out_ap_vld,
        weights_1_1_0_2_out,
        weights_1_1_0_2_out_ap_vld,
        weights_1_0_2_2_out,
        weights_1_0_2_2_out_ap_vld,
        weights_1_0_1_2_out,
        weights_1_0_1_2_out_ap_vld,
        weights_1_0_0_2_out,
        weights_1_0_0_2_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   S_AXIS_V_TVALID;
input  [31:0] weights_1_7_2_024;
input  [31:0] weights_1_7_1_023;
input  [31:0] weights_1_7_0_022;
input  [31:0] weights_1_6_2_021;
input  [31:0] weights_1_6_1_020;
input  [31:0] weights_1_6_0_019;
input  [31:0] weights_1_5_2_018;
input  [31:0] weights_1_5_1_017;
input  [31:0] weights_1_5_0_016;
input  [31:0] weights_1_4_2_015;
input  [31:0] weights_1_4_1_014;
input  [31:0] weights_1_4_0_013;
input  [31:0] weights_1_3_2_012;
input  [31:0] weights_1_3_1_011;
input  [31:0] weights_1_3_0_010;
input  [31:0] weights_1_2_2_09;
input  [31:0] weights_1_2_1_08;
input  [31:0] weights_1_2_0_07;
input  [31:0] weights_1_1_2_06;
input  [31:0] weights_1_1_1_05;
input  [31:0] weights_1_1_0_04;
input  [31:0] weights_1_0_2_03;
input  [31:0] weights_1_0_1_02;
input  [31:0] weights_1_0_0_01;
input  [63:0] S_AXIS_V_TDATA;
output   S_AXIS_V_TREADY;
output  [31:0] weights_1_7_2_2_out;
output   weights_1_7_2_2_out_ap_vld;
output  [31:0] weights_1_7_1_2_out;
output   weights_1_7_1_2_out_ap_vld;
output  [31:0] weights_1_7_0_2_out;
output   weights_1_7_0_2_out_ap_vld;
output  [31:0] weights_1_6_2_2_out;
output   weights_1_6_2_2_out_ap_vld;
output  [31:0] weights_1_6_1_2_out;
output   weights_1_6_1_2_out_ap_vld;
output  [31:0] weights_1_6_0_2_out;
output   weights_1_6_0_2_out_ap_vld;
output  [31:0] weights_1_5_2_2_out;
output   weights_1_5_2_2_out_ap_vld;
output  [31:0] weights_1_5_1_2_out;
output   weights_1_5_1_2_out_ap_vld;
output  [31:0] weights_1_5_0_2_out;
output   weights_1_5_0_2_out_ap_vld;
output  [31:0] weights_1_4_2_2_out;
output   weights_1_4_2_2_out_ap_vld;
output  [31:0] weights_1_4_1_2_out;
output   weights_1_4_1_2_out_ap_vld;
output  [31:0] weights_1_4_0_2_out;
output   weights_1_4_0_2_out_ap_vld;
output  [31:0] weights_1_3_2_2_out;
output   weights_1_3_2_2_out_ap_vld;
output  [31:0] weights_1_3_1_2_out;
output   weights_1_3_1_2_out_ap_vld;
output  [31:0] weights_1_3_0_2_out;
output   weights_1_3_0_2_out_ap_vld;
output  [31:0] weights_1_2_2_2_out;
output   weights_1_2_2_2_out_ap_vld;
output  [31:0] weights_1_2_1_2_out;
output   weights_1_2_1_2_out_ap_vld;
output  [31:0] weights_1_2_0_2_out;
output   weights_1_2_0_2_out_ap_vld;
output  [31:0] weights_1_1_2_2_out;
output   weights_1_1_2_2_out_ap_vld;
output  [31:0] weights_1_1_1_2_out;
output   weights_1_1_1_2_out_ap_vld;
output  [31:0] weights_1_1_0_2_out;
output   weights_1_1_0_2_out_ap_vld;
output  [31:0] weights_1_0_2_2_out;
output   weights_1_0_2_2_out_ap_vld;
output  [31:0] weights_1_0_1_2_out;
output   weights_1_0_1_2_out_ap_vld;
output  [31:0] weights_1_0_0_2_out;
output   weights_1_0_0_2_out_ap_vld;

reg ap_idle;
reg S_AXIS_V_TREADY;
reg weights_1_7_2_2_out_ap_vld;
reg weights_1_7_1_2_out_ap_vld;
reg weights_1_7_0_2_out_ap_vld;
reg weights_1_6_2_2_out_ap_vld;
reg weights_1_6_1_2_out_ap_vld;
reg weights_1_6_0_2_out_ap_vld;
reg weights_1_5_2_2_out_ap_vld;
reg weights_1_5_1_2_out_ap_vld;
reg weights_1_5_0_2_out_ap_vld;
reg weights_1_4_2_2_out_ap_vld;
reg weights_1_4_1_2_out_ap_vld;
reg weights_1_4_0_2_out_ap_vld;
reg weights_1_3_2_2_out_ap_vld;
reg weights_1_3_1_2_out_ap_vld;
reg weights_1_3_0_2_out_ap_vld;
reg weights_1_2_2_2_out_ap_vld;
reg weights_1_2_1_2_out_ap_vld;
reg weights_1_2_0_2_out_ap_vld;
reg weights_1_1_2_2_out_ap_vld;
reg weights_1_1_1_2_out_ap_vld;
reg weights_1_1_0_2_out_ap_vld;
reg weights_1_0_2_2_out_ap_vld;
reg weights_1_0_1_2_out_ap_vld;
reg weights_1_0_0_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln51_fu_726_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    S_AXIS_V_TDATA_blk_n;
reg   [3:0] j_fu_162;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
wire   [3:0] add_ln52_fu_904_p2;
reg   [1:0] i_fu_166;
reg   [1:0] ap_sig_allocacmp_i_load;
wire   [1:0] select_ln51_1_fu_764_p3;
reg   [4:0] indvar_flatten7_fu_170;
reg   [4:0] ap_sig_allocacmp_indvar_flatten7_load;
wire   [4:0] add_ln51_1_fu_732_p2;
reg   [31:0] weights_1_7_1_fu_174;
wire   [31:0] weights_1_7_1_25_fu_776_p1;
wire   [2:0] trunc_ln54_fu_780_p1;
reg   [31:0] weights_1_7_1_1_fu_178;
reg   [31:0] weights_1_7_1_3_fu_182;
reg   [31:0] weights_1_7_1_4_fu_186;
reg   [31:0] weights_1_7_1_5_fu_190;
reg   [31:0] weights_1_7_1_6_fu_194;
reg   [31:0] weights_1_7_1_7_fu_198;
reg   [31:0] weights_1_7_1_8_fu_202;
reg   [31:0] weights_1_7_1_9_fu_206;
reg   [31:0] weights_1_7_1_10_fu_210;
reg   [31:0] weights_1_7_1_11_fu_214;
reg   [31:0] weights_1_7_1_12_fu_218;
reg   [31:0] weights_1_7_1_13_fu_222;
reg   [31:0] weights_1_7_1_14_fu_226;
reg   [31:0] weights_1_7_1_15_fu_230;
reg   [31:0] weights_1_7_1_16_fu_234;
reg   [31:0] weights_1_7_1_17_fu_238;
reg   [31:0] weights_1_7_1_18_fu_242;
reg   [31:0] weights_1_7_1_19_fu_246;
reg   [31:0] weights_1_7_1_20_fu_250;
reg   [31:0] weights_1_7_1_21_fu_254;
reg   [31:0] weights_1_7_1_22_fu_258;
reg   [31:0] weights_1_7_1_2_fu_262;
reg   [31:0] weights_1_7_1_23_fu_266;
wire   [0:0] icmp_ln52_fu_750_p2;
wire   [1:0] add_ln51_fu_744_p2;
wire   [31:0] trunc_ln145_fu_772_p1;
wire   [3:0] select_ln51_fu_756_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_409;
reg    ap_condition_215;
reg    ap_condition_221;
reg    ap_condition_228;
reg    ap_condition_237;
reg    ap_condition_243;
reg    ap_condition_250;
reg    ap_condition_259;
reg    ap_condition_265;
reg    ap_condition_272;
reg    ap_condition_281;
reg    ap_condition_153;
reg    ap_condition_287;
reg    ap_condition_294;
reg    ap_condition_303;
reg    ap_condition_316;
reg    ap_condition_309;
reg    ap_condition_162;
reg    ap_condition_171;
reg    ap_condition_177;
reg    ap_condition_184;
reg    ap_condition_193;
reg    ap_condition_199;
reg    ap_condition_206;
reg    ap_condition_144;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

mlp_dance3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((icmp_ln51_fu_726_p2 == 1'd0)) begin
            i_fu_166 <= select_ln51_1_fu_764_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_166 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((icmp_ln51_fu_726_p2 == 1'd0)) begin
            indvar_flatten7_fu_170 <= add_ln51_1_fu_732_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten7_fu_170 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((icmp_ln51_fu_726_p2 == 1'd0)) begin
            j_fu_162 <= add_ln52_fu_904_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_162 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_215)) begin
            weights_1_7_1_10_fu_210 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_10_fu_210 <= weights_1_3_0_010;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_221)) begin
            weights_1_7_1_11_fu_214 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_11_fu_214 <= weights_1_3_1_011;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_228)) begin
            weights_1_7_1_12_fu_218 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_12_fu_218 <= weights_1_3_2_012;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_237)) begin
            weights_1_7_1_13_fu_222 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_13_fu_222 <= weights_1_4_0_013;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_243)) begin
            weights_1_7_1_14_fu_226 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_14_fu_226 <= weights_1_4_1_014;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_250)) begin
            weights_1_7_1_15_fu_230 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_15_fu_230 <= weights_1_4_2_015;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_259)) begin
            weights_1_7_1_16_fu_234 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_16_fu_234 <= weights_1_5_0_016;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_265)) begin
            weights_1_7_1_17_fu_238 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_17_fu_238 <= weights_1_5_1_017;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_272)) begin
            weights_1_7_1_18_fu_242 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_18_fu_242 <= weights_1_5_2_018;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_281)) begin
            weights_1_7_1_19_fu_246 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_19_fu_246 <= weights_1_6_0_019;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_153)) begin
            weights_1_7_1_1_fu_178 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_1_fu_178 <= weights_1_0_1_02;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_287)) begin
            weights_1_7_1_20_fu_250 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_20_fu_250 <= weights_1_6_1_020;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_294)) begin
            weights_1_7_1_21_fu_254 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_21_fu_254 <= weights_1_6_2_021;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_303)) begin
            weights_1_7_1_22_fu_258 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_22_fu_258 <= weights_1_7_0_022;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_316)) begin
            weights_1_7_1_23_fu_266 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_23_fu_266 <= weights_1_7_2_024;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_309)) begin
            weights_1_7_1_2_fu_262 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_2_fu_262 <= weights_1_7_1_023;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_162)) begin
            weights_1_7_1_3_fu_182 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_3_fu_182 <= weights_1_0_2_03;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_171)) begin
            weights_1_7_1_4_fu_186 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_4_fu_186 <= weights_1_1_0_04;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_177)) begin
            weights_1_7_1_5_fu_190 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_5_fu_190 <= weights_1_1_1_05;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_184)) begin
            weights_1_7_1_6_fu_194 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_6_fu_194 <= weights_1_1_2_06;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_193)) begin
            weights_1_7_1_7_fu_198 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_7_fu_198 <= weights_1_2_0_07;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_199)) begin
            weights_1_7_1_8_fu_202 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_8_fu_202 <= weights_1_2_1_08;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_206)) begin
            weights_1_7_1_9_fu_206 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_9_fu_206 <= weights_1_2_2_09;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_409)) begin
        if ((1'b1 == ap_condition_144)) begin
            weights_1_7_1_fu_174 <= weights_1_7_1_25_fu_776_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            weights_1_7_1_fu_174 <= weights_1_0_0_01;
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln51_fu_726_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        S_AXIS_V_TDATA_blk_n = S_AXIS_V_TVALID;
    end else begin
        S_AXIS_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        S_AXIS_V_TREADY = 1'b1;
    end else begin
        S_AXIS_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_166;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten7_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten7_load = indvar_flatten7_fu_170;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_162;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_0_0_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_0_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_0_1_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_0_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_0_2_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_0_2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_1_0_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_1_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_1_1_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_1_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_1_2_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_1_2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_2_0_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_2_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_2_1_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_2_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_2_2_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_2_2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_3_0_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_3_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_3_1_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_3_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_3_2_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_3_2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_4_0_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_4_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_4_1_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_4_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_4_2_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_4_2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_5_0_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_5_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_5_1_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_5_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_5_2_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_5_2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_6_0_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_6_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_6_1_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_6_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_6_2_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_6_2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_7_0_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_7_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_7_1_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_7_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (icmp_ln51_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_7_2_2_out_ap_vld = 1'b1;
    end else begin
        weights_1_7_2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_1_fu_732_p2 = (ap_sig_allocacmp_indvar_flatten7_load + 5'd1);

assign add_ln51_fu_744_p2 = (ap_sig_allocacmp_i_load + 2'd1);

assign add_ln52_fu_904_p2 = (select_ln51_fu_756_p3 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_144 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd0) & (select_ln51_1_fu_764_p3 == 2'd0));
end

always @ (*) begin
    ap_condition_153 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd0) & (select_ln51_1_fu_764_p3 == 2'd1));
end

always @ (*) begin
    ap_condition_162 = (~(select_ln51_1_fu_764_p3 == 2'd1) & ~(select_ln51_1_fu_764_p3 == 2'd0) & (icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd0));
end

always @ (*) begin
    ap_condition_171 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd1) & (select_ln51_1_fu_764_p3 == 2'd0));
end

always @ (*) begin
    ap_condition_177 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd1) & (select_ln51_1_fu_764_p3 == 2'd1));
end

always @ (*) begin
    ap_condition_184 = (~(select_ln51_1_fu_764_p3 == 2'd1) & ~(select_ln51_1_fu_764_p3 == 2'd0) & (icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd1));
end

always @ (*) begin
    ap_condition_193 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd2) & (select_ln51_1_fu_764_p3 == 2'd0));
end

always @ (*) begin
    ap_condition_199 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd2) & (select_ln51_1_fu_764_p3 == 2'd1));
end

always @ (*) begin
    ap_condition_206 = (~(select_ln51_1_fu_764_p3 == 2'd1) & ~(select_ln51_1_fu_764_p3 == 2'd0) & (icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd2));
end

always @ (*) begin
    ap_condition_215 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd3) & (select_ln51_1_fu_764_p3 == 2'd0));
end

always @ (*) begin
    ap_condition_221 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd3) & (select_ln51_1_fu_764_p3 == 2'd1));
end

always @ (*) begin
    ap_condition_228 = (~(select_ln51_1_fu_764_p3 == 2'd1) & ~(select_ln51_1_fu_764_p3 == 2'd0) & (icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd3));
end

always @ (*) begin
    ap_condition_237 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd4) & (select_ln51_1_fu_764_p3 == 2'd0));
end

always @ (*) begin
    ap_condition_243 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd4) & (select_ln51_1_fu_764_p3 == 2'd1));
end

always @ (*) begin
    ap_condition_250 = (~(select_ln51_1_fu_764_p3 == 2'd1) & ~(select_ln51_1_fu_764_p3 == 2'd0) & (icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd4));
end

always @ (*) begin
    ap_condition_259 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd5) & (select_ln51_1_fu_764_p3 == 2'd0));
end

always @ (*) begin
    ap_condition_265 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd5) & (select_ln51_1_fu_764_p3 == 2'd1));
end

always @ (*) begin
    ap_condition_272 = (~(select_ln51_1_fu_764_p3 == 2'd1) & ~(select_ln51_1_fu_764_p3 == 2'd0) & (icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd5));
end

always @ (*) begin
    ap_condition_281 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd6) & (select_ln51_1_fu_764_p3 == 2'd0));
end

always @ (*) begin
    ap_condition_287 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd6) & (select_ln51_1_fu_764_p3 == 2'd1));
end

always @ (*) begin
    ap_condition_294 = (~(select_ln51_1_fu_764_p3 == 2'd1) & ~(select_ln51_1_fu_764_p3 == 2'd0) & (icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd6));
end

always @ (*) begin
    ap_condition_303 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd7) & (select_ln51_1_fu_764_p3 == 2'd0));
end

always @ (*) begin
    ap_condition_309 = ((icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd7) & (select_ln51_1_fu_764_p3 == 2'd1));
end

always @ (*) begin
    ap_condition_316 = (~(select_ln51_1_fu_764_p3 == 2'd1) & ~(select_ln51_1_fu_764_p3 == 2'd0) & (icmp_ln51_fu_726_p2 == 1'd0) & (trunc_ln54_fu_780_p1 == 3'd7));
end

always @ (*) begin
    ap_condition_409 = (~((ap_start_int == 1'b0) | ((1'b0 == S_AXIS_V_TVALID) & (icmp_ln51_fu_726_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln51_fu_726_p2 = ((ap_sig_allocacmp_indvar_flatten7_load == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_750_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign select_ln51_1_fu_764_p3 = ((icmp_ln52_fu_750_p2[0:0] == 1'b1) ? add_ln51_fu_744_p2 : ap_sig_allocacmp_i_load);

assign select_ln51_fu_756_p3 = ((icmp_ln52_fu_750_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign trunc_ln145_fu_772_p1 = S_AXIS_V_TDATA[31:0];

assign trunc_ln54_fu_780_p1 = select_ln51_fu_756_p3[2:0];

assign weights_1_0_0_2_out = weights_1_7_1_fu_174;

assign weights_1_0_1_2_out = weights_1_7_1_1_fu_178;

assign weights_1_0_2_2_out = weights_1_7_1_3_fu_182;

assign weights_1_1_0_2_out = weights_1_7_1_4_fu_186;

assign weights_1_1_1_2_out = weights_1_7_1_5_fu_190;

assign weights_1_1_2_2_out = weights_1_7_1_6_fu_194;

assign weights_1_2_0_2_out = weights_1_7_1_7_fu_198;

assign weights_1_2_1_2_out = weights_1_7_1_8_fu_202;

assign weights_1_2_2_2_out = weights_1_7_1_9_fu_206;

assign weights_1_3_0_2_out = weights_1_7_1_10_fu_210;

assign weights_1_3_1_2_out = weights_1_7_1_11_fu_214;

assign weights_1_3_2_2_out = weights_1_7_1_12_fu_218;

assign weights_1_4_0_2_out = weights_1_7_1_13_fu_222;

assign weights_1_4_1_2_out = weights_1_7_1_14_fu_226;

assign weights_1_4_2_2_out = weights_1_7_1_15_fu_230;

assign weights_1_5_0_2_out = weights_1_7_1_16_fu_234;

assign weights_1_5_1_2_out = weights_1_7_1_17_fu_238;

assign weights_1_5_2_2_out = weights_1_7_1_18_fu_242;

assign weights_1_6_0_2_out = weights_1_7_1_19_fu_246;

assign weights_1_6_1_2_out = weights_1_7_1_20_fu_250;

assign weights_1_6_2_2_out = weights_1_7_1_21_fu_254;

assign weights_1_7_0_2_out = weights_1_7_1_22_fu_258;

assign weights_1_7_1_25_fu_776_p1 = trunc_ln145_fu_772_p1;

assign weights_1_7_1_2_out = weights_1_7_1_2_fu_262;

assign weights_1_7_2_2_out = weights_1_7_1_23_fu_266;

endmodule //mlp_dance3_mlp_dance3_Pipeline_loadweights1_VITIS_LOOP_52_3
