-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_dance3_mlp_dance3_Pipeline_layer3_pos is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer_2_ce0 : OUT STD_LOGIC;
    buffer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer_2_ce1 : OUT STD_LOGIC;
    buffer_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_3_pos_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weights_3_pos_ce0 : OUT STD_LOGIC;
    weights_3_pos_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_3_pos_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weights_3_pos_ce1 : OUT STD_LOGIC;
    weights_3_pos_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_3_pos_0_01 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_3_pos_1_02 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_3_pos_2_03 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer_3_ce0 : OUT STD_LOGIC;
    buffer_3_we0 : OUT STD_LOGIC;
    buffer_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_705_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_ce : OUT STD_LOGIC );
end;


architecture behav of mlp_dance3_mlp_dance3_Pipeline_layer3_pos is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_state32_pp0_stage15_iter1 : BOOLEAN;
    signal ap_block_state48_pp0_stage15_iter2 : BOOLEAN;
    signal ap_block_state64_pp0_stage15_iter3 : BOOLEAN;
    signal ap_block_state80_pp0_stage15_iter4 : BOOLEAN;
    signal ap_block_state96_pp0_stage15_iter5 : BOOLEAN;
    signal ap_block_state112_pp0_stage15_iter6 : BOOLEAN;
    signal ap_block_state128_pp0_stage15_iter7 : BOOLEAN;
    signal ap_block_state144_pp0_stage15_iter8 : BOOLEAN;
    signal ap_block_state160_pp0_stage15_iter9 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal icmp_ln206_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage15 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state81_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state97_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state113_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state129_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state145_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state161_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_15_reg_152 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_15_reg_152_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln206_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_159_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_calculate_1_fu_79_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state38_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state54_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state70_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_state86_pp0_stage5_iter5 : BOOLEAN;
    signal ap_block_state102_pp0_stage5_iter6 : BOOLEAN;
    signal ap_block_state118_pp0_stage5_iter7 : BOOLEAN;
    signal ap_block_state134_pp0_stage5_iter8 : BOOLEAN;
    signal ap_block_state150_pp0_stage5_iter9 : BOOLEAN;
    signal ap_block_state166_pp0_stage5_iter10 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_s_fu_117_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state39_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state55_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_state71_pp0_stage6_iter4 : BOOLEAN;
    signal ap_block_state87_pp0_stage6_iter5 : BOOLEAN;
    signal ap_block_state103_pp0_stage6_iter6 : BOOLEAN;
    signal ap_block_state119_pp0_stage6_iter7 : BOOLEAN;
    signal ap_block_state135_pp0_stage6_iter8 : BOOLEAN;
    signal ap_block_state151_pp0_stage6_iter9 : BOOLEAN;
    signal ap_block_state167_pp0_stage6_iter10 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal add_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_state43_pp0_stage10_iter2 : BOOLEAN;
    signal ap_block_state59_pp0_stage10_iter3 : BOOLEAN;
    signal ap_block_state75_pp0_stage10_iter4 : BOOLEAN;
    signal ap_block_state91_pp0_stage10_iter5 : BOOLEAN;
    signal ap_block_state107_pp0_stage10_iter6 : BOOLEAN;
    signal ap_block_state123_pp0_stage10_iter7 : BOOLEAN;
    signal ap_block_state139_pp0_stage10_iter8 : BOOLEAN;
    signal ap_block_state155_pp0_stage10_iter9 : BOOLEAN;
    signal ap_block_state171_pp0_stage10_iter10 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_state44_pp0_stage11_iter2 : BOOLEAN;
    signal ap_block_state60_pp0_stage11_iter3 : BOOLEAN;
    signal ap_block_state76_pp0_stage11_iter4 : BOOLEAN;
    signal ap_block_state92_pp0_stage11_iter5 : BOOLEAN;
    signal ap_block_state108_pp0_stage11_iter6 : BOOLEAN;
    signal ap_block_state124_pp0_stage11_iter7 : BOOLEAN;
    signal ap_block_state140_pp0_stage11_iter8 : BOOLEAN;
    signal ap_block_state156_pp0_stage11_iter9 : BOOLEAN;
    signal ap_block_state172_pp0_stage11_iter10 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal grp_calculate_1_fu_79_ap_start : STD_LOGIC;
    signal grp_calculate_1_fu_79_ap_done : STD_LOGIC;
    signal grp_calculate_1_fu_79_ap_idle : STD_LOGIC;
    signal grp_calculate_1_fu_79_ap_ready : STD_LOGIC;
    signal grp_calculate_1_fu_79_a_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculate_1_fu_79_a_ce0 : STD_LOGIC;
    signal grp_calculate_1_fu_79_a_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculate_1_fu_79_a_ce1 : STD_LOGIC;
    signal grp_calculate_1_fu_79_b_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculate_1_fu_79_b_ce0 : STD_LOGIC;
    signal grp_calculate_1_fu_79_b_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculate_1_fu_79_b_ce1 : STD_LOGIC;
    signal grp_calculate_1_fu_79_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln206_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_44 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_15 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln206_fu_106_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter9_stage11 : STD_LOGIC;
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state66_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state82_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state98_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state114_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state130_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state146_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state162_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state35_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state51_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state67_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state83_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state99_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state115_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state131_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state147_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state163_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state36_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state52_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state68_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state84_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state100_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state116_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state132_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_state148_pp0_stage3_iter9 : BOOLEAN;
    signal ap_block_state164_pp0_stage3_iter10 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state37_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state53_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state69_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state85_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state101_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state117_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_state133_pp0_stage4_iter8 : BOOLEAN;
    signal ap_block_state149_pp0_stage4_iter9 : BOOLEAN;
    signal ap_block_state165_pp0_stage4_iter10 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state40_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state56_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_state72_pp0_stage7_iter4 : BOOLEAN;
    signal ap_block_state88_pp0_stage7_iter5 : BOOLEAN;
    signal ap_block_state104_pp0_stage7_iter6 : BOOLEAN;
    signal ap_block_state120_pp0_stage7_iter7 : BOOLEAN;
    signal ap_block_state136_pp0_stage7_iter8 : BOOLEAN;
    signal ap_block_state152_pp0_stage7_iter9 : BOOLEAN;
    signal ap_block_state168_pp0_stage7_iter10 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state41_pp0_stage8_iter2 : BOOLEAN;
    signal ap_block_state57_pp0_stage8_iter3 : BOOLEAN;
    signal ap_block_state73_pp0_stage8_iter4 : BOOLEAN;
    signal ap_block_state89_pp0_stage8_iter5 : BOOLEAN;
    signal ap_block_state105_pp0_stage8_iter6 : BOOLEAN;
    signal ap_block_state121_pp0_stage8_iter7 : BOOLEAN;
    signal ap_block_state137_pp0_stage8_iter8 : BOOLEAN;
    signal ap_block_state153_pp0_stage8_iter9 : BOOLEAN;
    signal ap_block_state169_pp0_stage8_iter10 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state42_pp0_stage9_iter2 : BOOLEAN;
    signal ap_block_state58_pp0_stage9_iter3 : BOOLEAN;
    signal ap_block_state74_pp0_stage9_iter4 : BOOLEAN;
    signal ap_block_state90_pp0_stage9_iter5 : BOOLEAN;
    signal ap_block_state106_pp0_stage9_iter6 : BOOLEAN;
    signal ap_block_state122_pp0_stage9_iter7 : BOOLEAN;
    signal ap_block_state138_pp0_stage9_iter8 : BOOLEAN;
    signal ap_block_state154_pp0_stage9_iter9 : BOOLEAN;
    signal ap_block_state170_pp0_stage9_iter10 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage12_iter1 : BOOLEAN;
    signal ap_block_state45_pp0_stage12_iter2 : BOOLEAN;
    signal ap_block_state61_pp0_stage12_iter3 : BOOLEAN;
    signal ap_block_state77_pp0_stage12_iter4 : BOOLEAN;
    signal ap_block_state93_pp0_stage12_iter5 : BOOLEAN;
    signal ap_block_state109_pp0_stage12_iter6 : BOOLEAN;
    signal ap_block_state125_pp0_stage12_iter7 : BOOLEAN;
    signal ap_block_state141_pp0_stage12_iter8 : BOOLEAN;
    signal ap_block_state157_pp0_stage12_iter9 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage13_iter1 : BOOLEAN;
    signal ap_block_state46_pp0_stage13_iter2 : BOOLEAN;
    signal ap_block_state62_pp0_stage13_iter3 : BOOLEAN;
    signal ap_block_state78_pp0_stage13_iter4 : BOOLEAN;
    signal ap_block_state94_pp0_stage13_iter5 : BOOLEAN;
    signal ap_block_state110_pp0_stage13_iter6 : BOOLEAN;
    signal ap_block_state126_pp0_stage13_iter7 : BOOLEAN;
    signal ap_block_state142_pp0_stage13_iter8 : BOOLEAN;
    signal ap_block_state158_pp0_stage13_iter9 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_state31_pp0_stage14_iter1 : BOOLEAN;
    signal ap_block_state47_pp0_stage14_iter2 : BOOLEAN;
    signal ap_block_state63_pp0_stage14_iter3 : BOOLEAN;
    signal ap_block_state79_pp0_stage14_iter4 : BOOLEAN;
    signal ap_block_state95_pp0_stage14_iter5 : BOOLEAN;
    signal ap_block_state111_pp0_stage14_iter6 : BOOLEAN;
    signal ap_block_state127_pp0_stage14_iter7 : BOOLEAN;
    signal ap_block_state143_pp0_stage14_iter8 : BOOLEAN;
    signal ap_block_state159_pp0_stage14_iter9 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage6_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mlp_dance3_calculate_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        b_ce1 : OUT STD_LOGIC;
        b_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_dance3_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_dance3_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_dance3_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_calculate_1_fu_79 : component mlp_dance3_calculate_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_calculate_1_fu_79_ap_start,
        ap_done => grp_calculate_1_fu_79_ap_done,
        ap_idle => grp_calculate_1_fu_79_ap_idle,
        ap_ready => grp_calculate_1_fu_79_ap_ready,
        a_address0 => grp_calculate_1_fu_79_a_address0,
        a_ce0 => grp_calculate_1_fu_79_a_ce0,
        a_q0 => buffer_2_q0,
        a_address1 => grp_calculate_1_fu_79_a_address1,
        a_ce1 => grp_calculate_1_fu_79_a_ce1,
        a_q1 => buffer_2_q1,
        b_address0 => grp_calculate_1_fu_79_b_address0,
        b_ce0 => grp_calculate_1_fu_79_b_ce0,
        b_q0 => weights_3_pos_q0,
        b_address1 => grp_calculate_1_fu_79_b_address1,
        b_ce1 => grp_calculate_1_fu_79_b_ce1,
        b_q1 => weights_3_pos_q1,
        b_offset => i_15_reg_152,
        ap_return => grp_calculate_1_fu_79_ap_return);

    mux_32_32_1_1_U44 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => bias_3_pos_0_01,
        din1 => bias_3_pos_1_02,
        din2 => bias_3_pos_2_03,
        din3 => i_15_reg_152_pp0_iter10_reg,
        dout => tmp_s_fu_117_p5);

    flow_control_loop_pipe_sequential_init_U : component mlp_dance3_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage15,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage15)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_calculate_1_fu_79_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_calculate_1_fu_79_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln206_fu_100_p2 = ap_const_lv1_0))) then 
                    grp_calculate_1_fu_79_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculate_1_fu_79_ap_ready = ap_const_logic_1)) then 
                    grp_calculate_1_fu_79_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    i_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln206_fu_100_p2 = ap_const_lv1_0))) then 
                    i_fu_44 <= add_ln206_fu_106_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_44 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                add_reg_173 <= grp_fu_705_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_15_reg_152 <= ap_sig_allocacmp_i_15;
                i_15_reg_152_pp0_iter10_reg <= i_15_reg_152_pp0_iter9_reg;
                i_15_reg_152_pp0_iter1_reg <= i_15_reg_152;
                i_15_reg_152_pp0_iter2_reg <= i_15_reg_152_pp0_iter1_reg;
                i_15_reg_152_pp0_iter3_reg <= i_15_reg_152_pp0_iter2_reg;
                i_15_reg_152_pp0_iter4_reg <= i_15_reg_152_pp0_iter3_reg;
                i_15_reg_152_pp0_iter5_reg <= i_15_reg_152_pp0_iter4_reg;
                i_15_reg_152_pp0_iter6_reg <= i_15_reg_152_pp0_iter5_reg;
                i_15_reg_152_pp0_iter7_reg <= i_15_reg_152_pp0_iter6_reg;
                i_15_reg_152_pp0_iter8_reg <= i_15_reg_152_pp0_iter7_reg;
                i_15_reg_152_pp0_iter9_reg <= i_15_reg_152_pp0_iter8_reg;
                icmp_ln206_reg_159 <= icmp_ln206_fu_100_p2;
                icmp_ln206_reg_159_pp0_iter1_reg <= icmp_ln206_reg_159;
                icmp_ln206_reg_159_pp0_iter2_reg <= icmp_ln206_reg_159_pp0_iter1_reg;
                icmp_ln206_reg_159_pp0_iter3_reg <= icmp_ln206_reg_159_pp0_iter2_reg;
                icmp_ln206_reg_159_pp0_iter4_reg <= icmp_ln206_reg_159_pp0_iter3_reg;
                icmp_ln206_reg_159_pp0_iter5_reg <= icmp_ln206_reg_159_pp0_iter4_reg;
                icmp_ln206_reg_159_pp0_iter6_reg <= icmp_ln206_reg_159_pp0_iter5_reg;
                icmp_ln206_reg_159_pp0_iter7_reg <= icmp_ln206_reg_159_pp0_iter6_reg;
                icmp_ln206_reg_159_pp0_iter8_reg <= icmp_ln206_reg_159_pp0_iter7_reg;
                icmp_ln206_reg_159_pp0_iter9_reg <= icmp_ln206_reg_159_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                val_reg_163 <= grp_calculate_1_fu_79_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage15_subdone, ap_block_pp0_stage11_subdone, ap_condition_exit_pp0_iter9_stage11, ap_idle_pp0_0to8, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to10, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage11))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln206_fu_106_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_15) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state100_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp0_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp0_stage6_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp0_stage7_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp0_stage8_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp0_stage9_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp0_stage10_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp0_stage11_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp0_stage12_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp0_stage13_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp0_stage14_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp0_stage15_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp0_stage5_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp0_stage6_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp0_stage7_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp0_stage8_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp0_stage9_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp0_stage10_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp0_stage11_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp0_stage12_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp0_stage13_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state127_pp0_stage14_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp0_stage15_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state132_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state133_pp0_stage4_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state134_pp0_stage5_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state135_pp0_stage6_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state136_pp0_stage7_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state137_pp0_stage8_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state138_pp0_stage9_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state139_pp0_stage10_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state140_pp0_stage11_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state141_pp0_stage12_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state142_pp0_stage13_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state143_pp0_stage14_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state144_pp0_stage15_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state145_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state146_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state147_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state148_pp0_stage3_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state149_pp0_stage4_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state150_pp0_stage5_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state151_pp0_stage6_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state152_pp0_stage7_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state153_pp0_stage8_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state154_pp0_stage9_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state155_pp0_stage10_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state156_pp0_stage11_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state157_pp0_stage12_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state158_pp0_stage13_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state159_pp0_stage14_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state160_pp0_stage15_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state161_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state162_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state163_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state164_pp0_stage3_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state165_pp0_stage4_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state166_pp0_stage5_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state167_pp0_stage6_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state168_pp0_stage7_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state169_pp0_stage8_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state170_pp0_stage9_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state171_pp0_stage10_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state172_pp0_stage11_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage12_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage13_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage14_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage15_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage10_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage11_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage12_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage13_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage14_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage15_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage8_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage9_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage10_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage11_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage12_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage13_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage14_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage15_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage7_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage8_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage9_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage10_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage11_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage12_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage13_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage14_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage15_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage6_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage7_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage8_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage9_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage10_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage11_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage12_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp0_stage13_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage14_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp0_stage15_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage15_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_subdone, icmp_ln206_reg_159)
    begin
        if (((icmp_ln206_reg_159 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            ap_condition_exit_pp0_iter0_stage15 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter9_stage11_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln206_reg_159_pp0_iter9_reg, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln206_reg_159_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_condition_exit_pp0_iter9_stage11 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter9_stage11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage15;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_44, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_15 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_15 <= i_fu_44;
        end if; 
    end process;

    buffer_2_address0 <= grp_calculate_1_fu_79_a_address0;
    buffer_2_address1 <= grp_calculate_1_fu_79_a_address1;
    buffer_2_ce0 <= grp_calculate_1_fu_79_a_ce0;
    buffer_2_ce1 <= grp_calculate_1_fu_79_a_ce1;
    buffer_3_address0 <= zext_ln206_fu_126_p1(7 - 1 downto 0);

    buffer_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            buffer_3_ce0 <= ap_const_logic_1;
        else 
            buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_d0 <= add_reg_173;

    buffer_3_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            buffer_3_we0 <= ap_const_logic_1;
        else 
            buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_calculate_1_fu_79_ap_start <= grp_calculate_1_fu_79_ap_start_reg;
    grp_fu_705_p_ce <= ap_const_logic_1;
    grp_fu_705_p_din0 <= val_reg_163;
    grp_fu_705_p_din1 <= tmp_s_fu_117_p5;
    grp_fu_705_p_opcode <= ap_const_lv2_0;
    icmp_ln206_fu_100_p2 <= "1" when (ap_sig_allocacmp_i_15 = ap_const_lv2_3) else "0";
    weights_3_pos_address0 <= grp_calculate_1_fu_79_b_address0;
    weights_3_pos_address1 <= grp_calculate_1_fu_79_b_address1;
    weights_3_pos_ce0 <= grp_calculate_1_fu_79_b_ce0;
    weights_3_pos_ce1 <= grp_calculate_1_fu_79_b_ce1;
    zext_ln206_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_15_reg_152_pp0_iter10_reg),64));
end behav;
