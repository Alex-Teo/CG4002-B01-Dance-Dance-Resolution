-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_dance3_mlp_dance3_Pipeline_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_1_2_027 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_1_026 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_0_025 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_0_0_01 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_0_1_02 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_0_2_03 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_1_0_04 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_1_1_05 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_1_2_06 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_2_0_07 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_2_1_08 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_2_2_09 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_3_0_010 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_3_1_011 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_3_2_012 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_4_0_013 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_4_1_014 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_4_2_015 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_5_0_016 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_5_1_017 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_5_2_018 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_6_0_019 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_6_1_020 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_6_2_021 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_7_0_022 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_7_1_023 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_1_7_2_024 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_0_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_1_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_2_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_3_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_4_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_5_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_6_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_0_7_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_2_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_2_1_out_ap_vld : OUT STD_LOGIC;
    buffer_1_1_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_1_1_out_ap_vld : OUT STD_LOGIC;
    buffer_1_0_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_0_1_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1742_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1742_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1742_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1742_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1742_p_ce : OUT STD_LOGIC;
    grp_fu_1746_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1746_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1746_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1746_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1746_p_ce : OUT STD_LOGIC;
    grp_fu_1750_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1750_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1750_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1750_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1750_p_ce : OUT STD_LOGIC;
    grp_fu_1754_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1754_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1754_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1754_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1754_p_ce : OUT STD_LOGIC;
    grp_fu_1758_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1758_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1758_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1758_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1758_p_ce : OUT STD_LOGIC;
    grp_fu_1762_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1762_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1762_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1762_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1762_p_ce : OUT STD_LOGIC;
    grp_fu_1766_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1766_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1766_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1766_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1766_p_ce : OUT STD_LOGIC;
    grp_fu_1770_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1770_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1770_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1770_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1770_p_ce : OUT STD_LOGIC;
    grp_fu_1774_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1774_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1774_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1774_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1774_p_ce : OUT STD_LOGIC;
    grp_fu_554_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_554_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_554_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_554_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_554_p_ce : OUT STD_LOGIC );
end;


architecture behav of mlp_dance3_mlp_dance3_Pipeline_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln155_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_4_reg_829 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter23_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter25_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter26_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter27_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter28_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter29_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter30_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter31_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter32_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter33_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter34_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter35_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter36_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter37_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter38_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter39_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter40_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter41_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter42_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter43_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter44_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter45_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter46_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter47_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter48_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_829_pp0_iter49_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln155_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_841_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_496_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_514_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal product_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_i_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_523_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal product_1_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_i_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_532_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal product_2_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_3_i_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_541_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal product_3_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_4_i_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_550_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal product_4_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_5_i_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_559_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal product_5_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_6_i_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_568_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal product_6_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_7_i_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal product_7_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_1_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_1_reg_975_pp0_iter49_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias_1_ce0 : STD_LOGIC;
    signal zext_ln155_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_122 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln155_fu_490_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_1_1_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_4_fu_622_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_1_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_2_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln32_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_584_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_594_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_1_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_1809 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mlp_dance3_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_dance3_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mlp_dance3_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_dance3_mlp_dance3_Pipeline_layer1_bias_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_dance3_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    bias_1_U : component mlp_dance3_mlp_dance3_Pipeline_layer1_bias_1
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_1_address0,
        ce0 => bias_1_ce0,
        q0 => bias_1_q0);

    fmul_32ns_32ns_32_4_max_dsp_1_U43 : component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buffer_0_0_1_reload,
        din1 => tmp_4_fu_496_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U44 : component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buffer_0_1_1_reload,
        din1 => tmp_5_fu_514_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_428_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U45 : component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buffer_0_2_1_reload,
        din1 => tmp_6_fu_523_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_432_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U46 : component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buffer_0_3_1_reload,
        din1 => tmp_7_fu_532_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_436_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U47 : component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buffer_0_4_1_reload,
        din1 => tmp_8_fu_541_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U48 : component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buffer_0_5_1_reload,
        din1 => tmp_s_fu_550_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U49 : component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buffer_0_6_1_reload,
        din1 => tmp_1_fu_559_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U50 : component mlp_dance3_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buffer_0_7_1_reload,
        din1 => tmp_2_fu_568_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_452_p2);

    mux_32_32_1_1_U52 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => weights_1_0_0_01,
        din1 => weights_1_0_1_02,
        din2 => weights_1_0_2_03,
        din3 => ap_sig_allocacmp_i_4,
        dout => tmp_4_fu_496_p5);

    mux_32_32_1_1_U53 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => weights_1_1_0_04,
        din1 => weights_1_1_1_05,
        din2 => weights_1_1_2_06,
        din3 => i_4_reg_829_pp0_iter4_reg,
        dout => tmp_5_fu_514_p5);

    mux_32_32_1_1_U54 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => weights_1_2_0_07,
        din1 => weights_1_2_1_08,
        din2 => weights_1_2_2_09,
        din3 => i_4_reg_829_pp0_iter9_reg,
        dout => tmp_6_fu_523_p5);

    mux_32_32_1_1_U55 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => weights_1_3_0_010,
        din1 => weights_1_3_1_011,
        din2 => weights_1_3_2_012,
        din3 => i_4_reg_829_pp0_iter14_reg,
        dout => tmp_7_fu_532_p5);

    mux_32_32_1_1_U56 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => weights_1_4_0_013,
        din1 => weights_1_4_1_014,
        din2 => weights_1_4_2_015,
        din3 => i_4_reg_829_pp0_iter19_reg,
        dout => tmp_8_fu_541_p5);

    mux_32_32_1_1_U57 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => weights_1_5_0_016,
        din1 => weights_1_5_1_017,
        din2 => weights_1_5_2_018,
        din3 => i_4_reg_829_pp0_iter24_reg,
        dout => tmp_s_fu_550_p5);

    mux_32_32_1_1_U58 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => weights_1_6_0_019,
        din1 => weights_1_6_1_020,
        din2 => weights_1_6_2_021,
        din3 => i_4_reg_829_pp0_iter29_reg,
        dout => tmp_1_fu_559_p5);

    mux_32_32_1_1_U59 : component mlp_dance3_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => weights_1_7_0_022,
        din1 => weights_1_7_1_023,
        din2 => weights_1_7_2_024,
        din3 => i_4_reg_829_pp0_iter34_reg,
        dout => tmp_2_fu_568_p5);

    flow_control_loop_pipe_sequential_init_U : component mlp_dance3_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter49_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    buffer_1_1_1_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    buffer_1_1_1_fu_130 <= buffer_1_1_026;
                elsif (((ap_enable_reg_pp0_iter50 = ap_const_logic_1) and (i_4_reg_829_pp0_iter49_reg = ap_const_lv2_1))) then 
                    buffer_1_1_1_fu_130 <= buffer_1_1_4_fu_622_p3;
                end if;
            end if; 
        end if;
    end process;

    buffer_1_1_2_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    buffer_1_1_2_fu_134 <= buffer_1_2_027;
                elsif ((ap_const_boolean_1 = ap_condition_1809)) then 
                    buffer_1_1_2_fu_134 <= buffer_1_1_4_fu_622_p3;
                end if;
            end if; 
        end if;
    end process;

    buffer_1_1_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    buffer_1_1_fu_126 <= buffer_1_0_025;
                elsif (((ap_enable_reg_pp0_iter50 = ap_const_logic_1) and (i_4_reg_829_pp0_iter49_reg = ap_const_lv2_0))) then 
                    buffer_1_1_fu_126 <= buffer_1_1_4_fu_622_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln155_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_122 <= add_ln155_fu_490_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_122 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                a_assign_1_reg_975 <= grp_fu_1774_p_dout0;
                a_assign_1_reg_975_pp0_iter49_reg <= a_assign_1_reg_975;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_4_reg_829_pp0_iter10_reg <= i_4_reg_829_pp0_iter9_reg;
                i_4_reg_829_pp0_iter11_reg <= i_4_reg_829_pp0_iter10_reg;
                i_4_reg_829_pp0_iter12_reg <= i_4_reg_829_pp0_iter11_reg;
                i_4_reg_829_pp0_iter13_reg <= i_4_reg_829_pp0_iter12_reg;
                i_4_reg_829_pp0_iter14_reg <= i_4_reg_829_pp0_iter13_reg;
                i_4_reg_829_pp0_iter15_reg <= i_4_reg_829_pp0_iter14_reg;
                i_4_reg_829_pp0_iter16_reg <= i_4_reg_829_pp0_iter15_reg;
                i_4_reg_829_pp0_iter17_reg <= i_4_reg_829_pp0_iter16_reg;
                i_4_reg_829_pp0_iter18_reg <= i_4_reg_829_pp0_iter17_reg;
                i_4_reg_829_pp0_iter19_reg <= i_4_reg_829_pp0_iter18_reg;
                i_4_reg_829_pp0_iter20_reg <= i_4_reg_829_pp0_iter19_reg;
                i_4_reg_829_pp0_iter21_reg <= i_4_reg_829_pp0_iter20_reg;
                i_4_reg_829_pp0_iter22_reg <= i_4_reg_829_pp0_iter21_reg;
                i_4_reg_829_pp0_iter23_reg <= i_4_reg_829_pp0_iter22_reg;
                i_4_reg_829_pp0_iter24_reg <= i_4_reg_829_pp0_iter23_reg;
                i_4_reg_829_pp0_iter25_reg <= i_4_reg_829_pp0_iter24_reg;
                i_4_reg_829_pp0_iter26_reg <= i_4_reg_829_pp0_iter25_reg;
                i_4_reg_829_pp0_iter27_reg <= i_4_reg_829_pp0_iter26_reg;
                i_4_reg_829_pp0_iter28_reg <= i_4_reg_829_pp0_iter27_reg;
                i_4_reg_829_pp0_iter29_reg <= i_4_reg_829_pp0_iter28_reg;
                i_4_reg_829_pp0_iter2_reg <= i_4_reg_829_pp0_iter1_reg;
                i_4_reg_829_pp0_iter30_reg <= i_4_reg_829_pp0_iter29_reg;
                i_4_reg_829_pp0_iter31_reg <= i_4_reg_829_pp0_iter30_reg;
                i_4_reg_829_pp0_iter32_reg <= i_4_reg_829_pp0_iter31_reg;
                i_4_reg_829_pp0_iter33_reg <= i_4_reg_829_pp0_iter32_reg;
                i_4_reg_829_pp0_iter34_reg <= i_4_reg_829_pp0_iter33_reg;
                i_4_reg_829_pp0_iter35_reg <= i_4_reg_829_pp0_iter34_reg;
                i_4_reg_829_pp0_iter36_reg <= i_4_reg_829_pp0_iter35_reg;
                i_4_reg_829_pp0_iter37_reg <= i_4_reg_829_pp0_iter36_reg;
                i_4_reg_829_pp0_iter38_reg <= i_4_reg_829_pp0_iter37_reg;
                i_4_reg_829_pp0_iter39_reg <= i_4_reg_829_pp0_iter38_reg;
                i_4_reg_829_pp0_iter3_reg <= i_4_reg_829_pp0_iter2_reg;
                i_4_reg_829_pp0_iter40_reg <= i_4_reg_829_pp0_iter39_reg;
                i_4_reg_829_pp0_iter41_reg <= i_4_reg_829_pp0_iter40_reg;
                i_4_reg_829_pp0_iter42_reg <= i_4_reg_829_pp0_iter41_reg;
                i_4_reg_829_pp0_iter43_reg <= i_4_reg_829_pp0_iter42_reg;
                i_4_reg_829_pp0_iter44_reg <= i_4_reg_829_pp0_iter43_reg;
                i_4_reg_829_pp0_iter45_reg <= i_4_reg_829_pp0_iter44_reg;
                i_4_reg_829_pp0_iter46_reg <= i_4_reg_829_pp0_iter45_reg;
                i_4_reg_829_pp0_iter47_reg <= i_4_reg_829_pp0_iter46_reg;
                i_4_reg_829_pp0_iter48_reg <= i_4_reg_829_pp0_iter47_reg;
                i_4_reg_829_pp0_iter49_reg <= i_4_reg_829_pp0_iter48_reg;
                i_4_reg_829_pp0_iter4_reg <= i_4_reg_829_pp0_iter3_reg;
                i_4_reg_829_pp0_iter5_reg <= i_4_reg_829_pp0_iter4_reg;
                i_4_reg_829_pp0_iter6_reg <= i_4_reg_829_pp0_iter5_reg;
                i_4_reg_829_pp0_iter7_reg <= i_4_reg_829_pp0_iter6_reg;
                i_4_reg_829_pp0_iter8_reg <= i_4_reg_829_pp0_iter7_reg;
                i_4_reg_829_pp0_iter9_reg <= i_4_reg_829_pp0_iter8_reg;
                icmp_ln155_reg_841_pp0_iter10_reg <= icmp_ln155_reg_841_pp0_iter9_reg;
                icmp_ln155_reg_841_pp0_iter11_reg <= icmp_ln155_reg_841_pp0_iter10_reg;
                icmp_ln155_reg_841_pp0_iter12_reg <= icmp_ln155_reg_841_pp0_iter11_reg;
                icmp_ln155_reg_841_pp0_iter13_reg <= icmp_ln155_reg_841_pp0_iter12_reg;
                icmp_ln155_reg_841_pp0_iter14_reg <= icmp_ln155_reg_841_pp0_iter13_reg;
                icmp_ln155_reg_841_pp0_iter15_reg <= icmp_ln155_reg_841_pp0_iter14_reg;
                icmp_ln155_reg_841_pp0_iter16_reg <= icmp_ln155_reg_841_pp0_iter15_reg;
                icmp_ln155_reg_841_pp0_iter17_reg <= icmp_ln155_reg_841_pp0_iter16_reg;
                icmp_ln155_reg_841_pp0_iter18_reg <= icmp_ln155_reg_841_pp0_iter17_reg;
                icmp_ln155_reg_841_pp0_iter19_reg <= icmp_ln155_reg_841_pp0_iter18_reg;
                icmp_ln155_reg_841_pp0_iter20_reg <= icmp_ln155_reg_841_pp0_iter19_reg;
                icmp_ln155_reg_841_pp0_iter21_reg <= icmp_ln155_reg_841_pp0_iter20_reg;
                icmp_ln155_reg_841_pp0_iter22_reg <= icmp_ln155_reg_841_pp0_iter21_reg;
                icmp_ln155_reg_841_pp0_iter23_reg <= icmp_ln155_reg_841_pp0_iter22_reg;
                icmp_ln155_reg_841_pp0_iter24_reg <= icmp_ln155_reg_841_pp0_iter23_reg;
                icmp_ln155_reg_841_pp0_iter25_reg <= icmp_ln155_reg_841_pp0_iter24_reg;
                icmp_ln155_reg_841_pp0_iter26_reg <= icmp_ln155_reg_841_pp0_iter25_reg;
                icmp_ln155_reg_841_pp0_iter27_reg <= icmp_ln155_reg_841_pp0_iter26_reg;
                icmp_ln155_reg_841_pp0_iter28_reg <= icmp_ln155_reg_841_pp0_iter27_reg;
                icmp_ln155_reg_841_pp0_iter29_reg <= icmp_ln155_reg_841_pp0_iter28_reg;
                icmp_ln155_reg_841_pp0_iter2_reg <= icmp_ln155_reg_841_pp0_iter1_reg;
                icmp_ln155_reg_841_pp0_iter30_reg <= icmp_ln155_reg_841_pp0_iter29_reg;
                icmp_ln155_reg_841_pp0_iter31_reg <= icmp_ln155_reg_841_pp0_iter30_reg;
                icmp_ln155_reg_841_pp0_iter32_reg <= icmp_ln155_reg_841_pp0_iter31_reg;
                icmp_ln155_reg_841_pp0_iter33_reg <= icmp_ln155_reg_841_pp0_iter32_reg;
                icmp_ln155_reg_841_pp0_iter34_reg <= icmp_ln155_reg_841_pp0_iter33_reg;
                icmp_ln155_reg_841_pp0_iter35_reg <= icmp_ln155_reg_841_pp0_iter34_reg;
                icmp_ln155_reg_841_pp0_iter36_reg <= icmp_ln155_reg_841_pp0_iter35_reg;
                icmp_ln155_reg_841_pp0_iter37_reg <= icmp_ln155_reg_841_pp0_iter36_reg;
                icmp_ln155_reg_841_pp0_iter38_reg <= icmp_ln155_reg_841_pp0_iter37_reg;
                icmp_ln155_reg_841_pp0_iter39_reg <= icmp_ln155_reg_841_pp0_iter38_reg;
                icmp_ln155_reg_841_pp0_iter3_reg <= icmp_ln155_reg_841_pp0_iter2_reg;
                icmp_ln155_reg_841_pp0_iter40_reg <= icmp_ln155_reg_841_pp0_iter39_reg;
                icmp_ln155_reg_841_pp0_iter41_reg <= icmp_ln155_reg_841_pp0_iter40_reg;
                icmp_ln155_reg_841_pp0_iter42_reg <= icmp_ln155_reg_841_pp0_iter41_reg;
                icmp_ln155_reg_841_pp0_iter43_reg <= icmp_ln155_reg_841_pp0_iter42_reg;
                icmp_ln155_reg_841_pp0_iter44_reg <= icmp_ln155_reg_841_pp0_iter43_reg;
                icmp_ln155_reg_841_pp0_iter45_reg <= icmp_ln155_reg_841_pp0_iter44_reg;
                icmp_ln155_reg_841_pp0_iter46_reg <= icmp_ln155_reg_841_pp0_iter45_reg;
                icmp_ln155_reg_841_pp0_iter47_reg <= icmp_ln155_reg_841_pp0_iter46_reg;
                icmp_ln155_reg_841_pp0_iter48_reg <= icmp_ln155_reg_841_pp0_iter47_reg;
                icmp_ln155_reg_841_pp0_iter4_reg <= icmp_ln155_reg_841_pp0_iter3_reg;
                icmp_ln155_reg_841_pp0_iter5_reg <= icmp_ln155_reg_841_pp0_iter4_reg;
                icmp_ln155_reg_841_pp0_iter6_reg <= icmp_ln155_reg_841_pp0_iter5_reg;
                icmp_ln155_reg_841_pp0_iter7_reg <= icmp_ln155_reg_841_pp0_iter6_reg;
                icmp_ln155_reg_841_pp0_iter8_reg <= icmp_ln155_reg_841_pp0_iter7_reg;
                icmp_ln155_reg_841_pp0_iter9_reg <= icmp_ln155_reg_841_pp0_iter8_reg;
                mul_1_i_reg_865 <= grp_fu_428_p2;
                mul_2_i_reg_880 <= grp_fu_432_p2;
                mul_3_i_reg_895 <= grp_fu_436_p2;
                mul_4_i_reg_910 <= grp_fu_440_p2;
                mul_5_i_reg_925 <= grp_fu_444_p2;
                mul_6_i_reg_940 <= grp_fu_448_p2;
                mul_7_i_reg_955 <= grp_fu_452_p2;
                mul_i_reg_850 <= grp_fu_423_p2;
                product_1_reg_875 <= grp_fu_1746_p_dout0;
                product_2_reg_890 <= grp_fu_1750_p_dout0;
                product_3_reg_905 <= grp_fu_1754_p_dout0;
                product_4_reg_920 <= grp_fu_1758_p_dout0;
                product_5_reg_935 <= grp_fu_1762_p_dout0;
                product_6_reg_950 <= grp_fu_1766_p_dout0;
                product_7_reg_960 <= grp_fu_1770_p_dout0;
                product_reg_860 <= grp_fu_1742_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_4_reg_829 <= ap_sig_allocacmp_i_4;
                i_4_reg_829_pp0_iter1_reg <= i_4_reg_829;
                icmp_ln155_reg_841 <= icmp_ln155_fu_484_p2;
                icmp_ln155_reg_841_pp0_iter1_reg <= icmp_ln155_reg_841;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln155_fu_490_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(ap_const_lv2_1));
    and_ln32_fu_616_p2 <= (or_ln32_fu_610_p2 and grp_fu_554_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1809_assign_proc : process(ap_enable_reg_pp0_iter50, i_4_reg_829_pp0_iter49_reg)
    begin
                ap_condition_1809 <= (not((i_4_reg_829_pp0_iter49_reg = ap_const_lv2_1)) and not((i_4_reg_829_pp0_iter49_reg = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter50 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln155_fu_484_p2)
    begin
        if (((icmp_ln155_fu_484_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter49_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter49_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_122, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_122;
        end if; 
    end process;

    bias_1_address0 <= zext_ln155_fu_577_p1(3 - 1 downto 0);

    bias_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then 
            bias_1_ce0 <= ap_const_logic_1;
        else 
            bias_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_fu_581_p1 <= a_assign_1_reg_975_pp0_iter49_reg;
    buffer_1_0_1_out <= buffer_1_1_fu_126;

    buffer_1_0_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln155_reg_841_pp0_iter48_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln155_reg_841_pp0_iter48_reg = ap_const_lv1_1))) then 
            buffer_1_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            buffer_1_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_1_1_out <= buffer_1_1_1_fu_130;

    buffer_1_1_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln155_reg_841_pp0_iter48_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln155_reg_841_pp0_iter48_reg = ap_const_lv1_1))) then 
            buffer_1_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            buffer_1_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_1_4_fu_622_p3 <= 
        a_assign_1_reg_975_pp0_iter49_reg when (and_ln32_fu_616_p2(0) = '1') else 
        ap_const_lv32_0;
    buffer_1_2_1_out <= buffer_1_1_2_fu_134;

    buffer_1_2_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln155_reg_841_pp0_iter48_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln155_reg_841_pp0_iter48_reg = ap_const_lv1_1))) then 
            buffer_1_2_1_out_ap_vld <= ap_const_logic_1;
        else 
            buffer_1_2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1742_p_ce <= ap_const_logic_1;
    grp_fu_1742_p_din0 <= mul_i_reg_850;
    grp_fu_1742_p_din1 <= ap_const_lv32_0;
    grp_fu_1742_p_opcode <= ap_const_lv2_0;
    grp_fu_1746_p_ce <= ap_const_logic_1;
    grp_fu_1746_p_din0 <= product_reg_860;
    grp_fu_1746_p_din1 <= mul_1_i_reg_865;
    grp_fu_1746_p_opcode <= ap_const_lv2_0;
    grp_fu_1750_p_ce <= ap_const_logic_1;
    grp_fu_1750_p_din0 <= product_1_reg_875;
    grp_fu_1750_p_din1 <= mul_2_i_reg_880;
    grp_fu_1750_p_opcode <= ap_const_lv2_0;
    grp_fu_1754_p_ce <= ap_const_logic_1;
    grp_fu_1754_p_din0 <= product_2_reg_890;
    grp_fu_1754_p_din1 <= mul_3_i_reg_895;
    grp_fu_1754_p_opcode <= ap_const_lv2_0;
    grp_fu_1758_p_ce <= ap_const_logic_1;
    grp_fu_1758_p_din0 <= product_3_reg_905;
    grp_fu_1758_p_din1 <= mul_4_i_reg_910;
    grp_fu_1758_p_opcode <= ap_const_lv2_0;
    grp_fu_1762_p_ce <= ap_const_logic_1;
    grp_fu_1762_p_din0 <= product_4_reg_920;
    grp_fu_1762_p_din1 <= mul_5_i_reg_925;
    grp_fu_1762_p_opcode <= ap_const_lv2_0;
    grp_fu_1766_p_ce <= ap_const_logic_1;
    grp_fu_1766_p_din0 <= product_5_reg_935;
    grp_fu_1766_p_din1 <= mul_6_i_reg_940;
    grp_fu_1766_p_opcode <= ap_const_lv2_0;
    grp_fu_1770_p_ce <= ap_const_logic_1;
    grp_fu_1770_p_din0 <= product_6_reg_950;
    grp_fu_1770_p_din1 <= mul_7_i_reg_955;
    grp_fu_1770_p_opcode <= ap_const_lv2_0;
    grp_fu_1774_p_ce <= ap_const_logic_1;
    grp_fu_1774_p_din0 <= product_7_reg_960;
    grp_fu_1774_p_din1 <= bias_1_q0;
    grp_fu_1774_p_opcode <= ap_const_lv2_0;
    grp_fu_554_p_ce <= ap_const_logic_1;
    grp_fu_554_p_din0 <= a_assign_1_reg_975;
    grp_fu_554_p_din1 <= ap_const_lv32_0;
    grp_fu_554_p_opcode <= ap_const_lv5_2;
    icmp_ln155_fu_484_p2 <= "1" when (ap_sig_allocacmp_i_4 = ap_const_lv2_3) else "0";
    icmp_ln32_1_fu_604_p2 <= "1" when (trunc_ln32_fu_594_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_598_p2 <= "0" when (tmp_3_fu_584_p4 = ap_const_lv8_FF) else "1";
    or_ln32_fu_610_p2 <= (icmp_ln32_fu_598_p2 or icmp_ln32_1_fu_604_p2);
    tmp_3_fu_584_p4 <= bitcast_ln32_fu_581_p1(30 downto 23);
    trunc_ln32_fu_594_p1 <= bitcast_ln32_fu_581_p1(23 - 1 downto 0);
    zext_ln155_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_829_pp0_iter42_reg),64));
end behav;
